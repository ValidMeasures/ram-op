<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rflow [
<!ENTITY lt "&#38;#60;">
<!ENTITY gt "&#62;">
<!ENTITY amp "&#38;#38;">
<!ENTITY apos "&#39;">
<!ENTITY quot "&#34;">
]>
<rflow>
	<graph version="0.8" width="1625" height="615" locationtype="a" offsetx="451" offsety="180">
		<setting>
			<entry key="USE_GRID">true</entry>
			<entry key="FOLDER">ramOP</entry>
			<entry key="GRID_DISTANCE2">10</entry>
		</setting>
<properties>
<v key="packages"/>
</properties>
		<node id="0" date="1443002737152" uid="6ad7a87ad0bcf7ca" x="320" y="100">
			<command></command>
			<property/>
			<option type="com.ef_prime.rflow.node.base.CommentNodeModel">
				<entry key="state">opened</entry>
				<entry key="comment"> - OR - </entry>
			</option>
		</node>
		<node id="1" date="1423066006445" uid="fc4fb6afd174c76d" x="60" y="-40">
			<command></command>
			<property/>
			<option type="com.ef_prime.rflow.node.base.CommentNodeModel">
				<entry key="state">opened</entry>
				<entry key="comment">RAM-OP workflow v1.10 (4th August 2017).
Please quote this version number and date in all support requests.</entry>
			</option>
		</node>
		<node id="2" date="1419850397210" uid="a1639a57c7d83638" x="90" y="180">
			<command>################################################################################
#
#  Retrieve PSU data from CSV file
#
psuFileName &lt;- try(file.choose(), silent = TRUE)
if(class(psuFileName) == &quot;try-error&quot;)
  {
  stop(&quot;No file was selected&quot;, call. = FALSE)
  }
if(class(psuFileName) != &quot;try-error&quot;)
  {
  psuData &lt;- try(read.table(file = psuFileName, header = TRUE, sep = &quot;,&quot;), silent = TRUE)
  }
if(exists(&quot;psuData&quot;) &amp;&amp; class(psuData) == &quot;try-error&quot;)
  {
  stop(paste(&quot;Problem reading file &apos;&quot;, basename(psuFileName), &quot;&apos;.&quot;, sep = &quot;&quot;), call. = FALSE)
  }
rm(psuFileName)
</command>
			<property title="PSU Data" shape="INOUT">
				<comment state="opened" x="50" y="-20">Read population data
from CSV file ...</comment>
			</property>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
		<node id="3" date="1421942680854" uid="ed0bf9101e02a3c3" x="90" y="250">
			<command>################################################################################
#
#  Identifiers and survey administration data
#
#    psu    Cluster (PSU) identifier
#
psu &lt;- svy$psu


###############################################################################
#
#  Demography and situation indicators
#
#  Indicators are :
#
#    resp1     Respondent is SUBJECT
#    resp2     Respondent is FAMILY CARER
#    resp3     Respondent is OTHER CARER
#    resp4     Respondent is OTHER
#    age       Age of respondent (years)
#    ageGrp1   Age of respondent is between 50 and 59 years
#    ageGrp2   Age of respondent is between 60 and 69 years
#    ageGrp3   Age of respondent is between 70 and 79 years
#    ageGrp4   Age of respondent is between 80 and 89 years
#    ageGrp5   Age of respondent is 90 years or older
#    sex1      Sex = MALE
#    sex2      Sex = FEMALE
#    marital1  Marital status = SINGLE
#    marital2  Marital status = MARRIED
#    marital3  Marital status = LIVING TOGETHER
#    marital4  Marital status = DIVORCED
#    marital5  Marital status = WIDOWED
#    marital6  Marital status = OTHER
#    alone     Respondent lives alone
#
resp1    &lt;- recode(svy$d1, &quot;1=1; 5:9=1; NA=1; else=0&quot;)
resp2    &lt;- recode(svy$d1, &quot;2=1; else=0&quot;)
resp3    &lt;- recode(svy$d1, &quot;3=1; else=0&quot;)
resp4    &lt;- recode(svy$d1, &quot;4=1; else=0&quot;)
age      &lt;- recode(svy$d2, &quot;888=NA; 999=NA&quot;)
ageGrp1  &lt;- recode(age,&quot;50:59=1; NA=NA; else=0&quot;)
ageGrp2  &lt;- recode(age,&quot;60:69=1; NA=NA; else=0&quot;)
ageGrp3  &lt;- recode(age,&quot;70:79=1; NA=NA; else=0&quot;)
ageGrp4  &lt;- recode(age,&quot;80:89=1; NA=NA; else=0&quot;)
ageGrp5  &lt;- recode(age,&quot;90:hi=1; NA=NA; else=0&quot;)
sex1     &lt;- recode(svy$d3, &quot;1=1; 2=0; else=NA&quot;)
sex2     &lt;- recode(svy$d3, &quot;1=0; 2=1; else=NA&quot;)
marital1 &lt;- recode(svy$d4, &quot;1=1; else=0&quot;)
marital2 &lt;- recode(svy$d4, &quot;2=1; else=0&quot;)
marital3 &lt;- recode(svy$d4, &quot;3=1; else=0&quot;)
marital4 &lt;- recode(svy$d4, &quot;4=1; else=0&quot;)
marital5 &lt;- recode(svy$d4, &quot;5=1; else=0&quot;)
marital6 &lt;- recode(svy$d4, &quot;6=1; else=0&quot;)
alone    &lt;- recode(svy$d5, &quot;1=1; else=0&quot;)

################################################################################
#
#  Dietary intake indicators
#
#  Indicators are :
#
#    MF           Meal frequency
#    DDS          DDS (count of 11 groups)
#    FG01         Cereals
#    FG02         Roots and tubers
#    FG03         Fruits and vegetables
#    FG04         All meat
#    FG05         Eggs
#    FG06         Fish
#    FG07         Legumes, nuts, and seeds
#    FG08         Milk and milk products
#    FG09         Fats
#    FG10         Sugar
#    FG11         Other
#    aProtein	   Protein rich animal sources of protein
#    pProtein	   Protein rich plant sources of protein
#    proteinRich  Protein rich foods
#    pVitA        Plant sources of vitamin A
#    aVitA        Animal sources of vitamin A
#    xVitA        Any source of vitamin A
#    ironRich     Iron rich foods
#    caRich       Calcium rich foods
#    znRich       Zinc rich foods
#    vitB1        Vitamin B1-rich foods
#    vitB2        Vitamin B2-rich foods
#    vitB3        Vitamin B3-rich foods
#    vitB6        Vitamin B6-rich foods
#    vitB12       Vitamin B12-rich foods
#    vitBcomplex  Vitamin B1/B2/B3/B6/B12-rich foods
#
#  The basic approach used is described in:
#
#    Kennedy G, Ballard T, Dop M C (2011). Guidelines for Measuring Household
#    and Individual Dietary Diversity. Rome, FAO
#
#  and extended to include indicators of probable adequate intake of a number of
#  nutrients / micronutrients.
#

################################################################################
#
#  Meal frequency
#
MF &lt;- recode(svy$f1, &quot;9=0; NA=0&quot;)

################################################################################
#
#  Recode dietary diversity data
#
svy$f2a &lt;- recode(svy$f2a, &quot;1=1; else=0&quot;)
svy$f2b &lt;- recode(svy$f2b, &quot;1=1; else=0&quot;)
svy$f2c &lt;- recode(svy$f2c, &quot;1=1; else=0&quot;)
svy$f2d &lt;- recode(svy$f2d, &quot;1=1; else=0&quot;)
svy$f2e &lt;- recode(svy$f2e, &quot;1=1; else=0&quot;)
svy$f2f &lt;- recode(svy$f2f, &quot;1=1; else=0&quot;)
svy$f2g &lt;- recode(svy$f2g, &quot;1=1; else=0&quot;)
svy$f2h &lt;- recode(svy$f2h, &quot;1=1; else=0&quot;)
svy$f2i &lt;- recode(svy$f2i, &quot;1=1; else=0&quot;)
svy$f2j &lt;- recode(svy$f2j, &quot;1=1; else=0&quot;)
svy$f2k &lt;- recode(svy$f2k, &quot;1=1; else=0&quot;)
svy$f2l &lt;- recode(svy$f2l, &quot;1=1; else=0&quot;)
svy$f2m &lt;- recode(svy$f2m, &quot;1=1; else=0&quot;)
svy$f2n &lt;- recode(svy$f2n, &quot;1=1; else=0&quot;)
svy$f2o &lt;- recode(svy$f2o, &quot;1=1; else=0&quot;)
svy$f2p &lt;- recode(svy$f2p, &quot;1=1; else=0&quot;)
svy$f2q &lt;- recode(svy$f2q, &quot;1=1; else=0&quot;)
svy$f2r &lt;- recode(svy$f2r, &quot;1=1; else=0&quot;)
svy$f2s &lt;- recode(svy$f2s, &quot;1=1; else=0&quot;)

################################################################################
#
#  Dietary diversity
#
#    Recode to ELEVEN standard food groups :
#    
#      Var    Food group                               From ...
#      ----   ---------------------------------------  ---------------
#      FG01   Cereals                                  (f2c)
#      FG02   Roots and tubers                         (f2g)
#      FG03   Fruits and vegetables                    (f2d, f2f, f2i)
#      FG04   All meat                                 (f2j, f2k, f2q)
#      FG05   Eggs                                     (f2n)
#      FG06   Fish                                     (f2l)
#      FG07   Legumes, nuts, and seeds                 (f2h)
#      FG08   Milk and milk products                   (f2a, f2m)
#      FG09   Fats                                     (f2e, f2o)
#      FG10   Sugar                                    (f2r)
#      FG11   Other                                    (f2b, f2p, f2s)
#      ----   ---------------------------------------  ---------------
#
#    and sum into &apos;DDS&apos; ...
#
FG01 &lt;- svy$f2c
FG02 &lt;- svy$f2g
FG03 &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2i == 1, 1, 0)
FG04 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q == 1, 1, 0)
FG05 &lt;- svy$f2n
FG06 &lt;- svy$f2l
FG07 &lt;- svy$f2h
FG08 &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)
FG09 &lt;- ifelse(svy$f2e == 1 | svy$f2o == 1, 1, 0)
FG10 &lt;- svy$f2r
FG11 &lt;- ifelse(svy$f2b == 1 | svy$f2p == 1 | svy$f2s == 1, 1, 0)
#
# Sum food groups to &apos;DDS&apos;
#
DDS &lt;- FG01 + FG02 + FG03 + FG04 + FG05 + FG06 + FG07 + FG08 + FG09 + FG10 + FG11

################################################################################
#
#  Protein rich foods in diet from aminal, plant, and all sources
#
aProtein &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q ==1 | svy$f2n == 1 | svy$f2a == 1 | svy$f2m == 1, 1, 0)
pProtein &lt;- ifelse(svy$f2h == 1 | svy$f2p == 1, 1, 0)
proteinRich &lt;- ifelse(aProtein == 1 | pProtein == 1, 1, 0)

################################################################################
#
#  Micronutrient intake (vitamin A, iron, calcium, zinc)
#
#    pVitA     Respondent consumes plant sources of vitamin A
#    aVitA     Respondent consumes animal sources of vitamin A
#    xVitA     Respondent consumes any source of vitamin A
#    ironRich  Respondent consumes iron rich foods
#    caRich    Respondent consumes calcium rich foods
#    znRich    Respondent consumes zinc rich foods
#
pVitA    &lt;- ifelse(svy$f2d == 1 | svy$f2e == 1 | svy$f2f == 1, 1, 0)
aVitA    &lt;- ifelse(svy$f2a == 1 | svy$f2j == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
xVitA    &lt;- ifelse(pVitA == 1 | aVitA == 1, 1, 0)
ironRich &lt;- ifelse(svy$f2f == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
caRich   &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)       
znRich   &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2p == 1 | svy$f2q == 1, 1, 0)

#################################################################################
#
#  Micronutrient intake (B vitamins)
#
#	vitB1        Respondent consumes vitamin B1-rich foods
#	vitB2        Respondent consumes vitamin B2-rich foods
#	vitB3        Respondent consumes vitamin B3-rich foods
#	vitB6        Respondent consumes vitamin B6-rich foods
#	vitB12       Respondent consumes vitamin B12-rich foods
#	vitBcomplex  Respondent consumes vitamin B1/B2/B3/B6/B12-rich foods
#
vitB1  &lt;- ifelse(svy$f2a == 1 | svy$f2e == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1 | svy$f2p == 1, 1, 0)
vitB2  &lt;- ifelse(svy$f2a == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1, 1, 0)
vitB3  &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB6  &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2i == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB12 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
vitBsources &lt;- vitB1 + vitB2 + vitB3 + vitB6 + vitB12
vitBcomplex &lt;- ifelse(vitBsources == 5, 1, 0)

################################################################################
#
# Clean-up
#
rm(vitBsources)

################################################################################
#
#  Household Hunger Scale (HHS)
#
#  Indicators are :
#
#    HHS1  Little or no hunger in household 
#    HHS2  Moderate hunger in household 
#    HHS3  Severe hunger in household
#
#  The HHS is described in :
#
#    Ballard T, Coates J, Swindale A, Deitchler M (2011). Household Hunger
#    Scale: Indicator Definition and Measurement Guide. Washington DC,
#    FANTA-2 Bridge, FHI 360
#

################################################################################
#
#  Recode component variables
#
svy$f3 &lt;- recode(svy$f3, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f4 &lt;- recode(svy$f4, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f5 &lt;- recode(svy$f5, &quot;1=1; 2=1; 3=2; else=0&quot;)

################################################################################
#
#  Sum components and classify hunger into three separate indicator variables
#
sumHHS &lt;- svy$f3 + svy$f4 + svy$f5
HHS1 &lt;- recode(sumHHS, &quot;0:1=1; else=0&quot;)
HHS2 &lt;- recode(sumHHS, &quot;2:3=1; else=0&quot;)
HHS3 &lt;- recode(sumHHS, &quot;4:6=1; else=0&quot;)

###############################################################################
#
#  Clean-up
#
rm(sumHHS)

################################################################################
#
#  Katz &quot;Index of Independence in Activities of Daily Living&quot; (ADL) score
#
#  Indicators are :
#
#    ADL01      Bathing
#    ADL02      Dressing
#    ADL03      Toileting
#    ADL04      Transferring (mobility)
#    ADL05      Continence
#    ADL06      Feeding
#    scoreADL   ADL score
#    classADL1  Severity of dependence = INDEPENDENT
#    classADL2  Severity of dependence = PARTIAL DEPENDENCY
#    classADL3  Severity of dependence = SEVERE DEPENDENCY
#    hasHelp    Has someone to help with ADL
#    unmetNeed  Unmet need (dependency with NO helper)
#
#
#    The Katz ADL score is described in :
#
#      Katz S, Ford AB, Moskowitz RW, Jackson BA, Jaffe MW (1963). Studies
#      of illness in the aged. The Index of ADL: a standardized measure of
#      biological and psychosocial function. JAMA, 1963, 185(12):914-9
#
#      Katz S, Down TD, Cash HR, Grotz, RC (1970). Progress in the development
#      of the index of ADL. The Gerontologist, 10(1), 20-30
#
#      Katz S (1983). Assessing self-maintenance: Activities of daily living,
#      mobility and instrumental activities of daily living. JAGS, 31(12),
#      721-726
#

################################################################################
#
#  Recode ADL (activities of daily living) score data
#
#  Each item is scored :
#
#    1 = Independence
#    0 = Needs assistance or supervision
#
ADL01 &lt;- recode(svy$a1, &quot;2=1; else=0&quot;)    # Bathing
ADL02 &lt;- recode(svy$a2, &quot;2=1; else=0&quot;)    # Dressing
ADL03 &lt;- recode(svy$a3, &quot;2=1; else=0&quot;)    # Toileting
ADL04 &lt;- recode(svy$a4, &quot;2=1; else=0&quot;)    # Transferring (mobility)
ADL05 &lt;- recode(svy$a5, &quot;2=1; else=0&quot;)    # Continence
ADL06 &lt;- recode(svy$a6, &quot;2=1; else=0&quot;)    # Feeding

################################################################################
#
#  Create ADL score (items summed over all six activities / dimensions)
#
scoreADL &lt;- ADL01 + ADL02 + ADL03 + ADL04 + ADL05 + ADL06

################################################################################
#
#  Severity of dependence (from Katz ADL score)
#
#    Indicator    Degree of severity    Related Scores
#    ---------    ------------------    ----------------
#    classADL1    Independent           scoreADL = 5,6
#    classADL2    Partial dependency    scoreADL = 3,4
#    classADL3    Severe dependency     scoreADL = 0,1,2
#    ---------    ------------------    ----------------
#
classADL1 &lt;- recode(scoreADL, &quot;5:6=1; else=0&quot;)
classADL2 &lt;- recode(scoreADL, &quot;3:4=1; else=0&quot;)
classADL3 &lt;- recode(scoreADL, &quot;0:2=1; else=0&quot;)

################################################################################
#
#  Does the subject have someone to help with everyday activities?
#
hasHelp &lt;- recode(svy$a7, &quot;1=1; else=0&quot;)

################################################################################
#
#  Does the subject need help but has no helper?
#
#  Note : Denominator is entire sample so the indicator is the proportion of
#         the population with unmet ADl help needs
#
unmetNeed &lt;- ifelse(scoreADL &lt; 6 &amp; hasHelp == 0, 1, 0)

################################################################################
#
#  K6 : Short form psychological distress score
#
#  Indicators are :
#
#    K6      K6 score
#    K6Case  K6 score &gt; 12  (in serious psychological distress)
#
#  The K6 score is described in :
#
#    Kessler RC, Andrews G, Colpe LJ, Hiripi E, Mroczek, DK, Normand SLT,
#    et al. (2002). Short screening scales to monitor population prevalences
#    and trends in non-specific psychological distress. Psychological
#    Medicine, 32(6), 959–976
#

################################################################################
#
#  Recode DON&apos;T KNOW, REFUSED, NA and MISSING values to 5 (NONE)
#
svy$k6a &lt;- recode(svy$k6a, &quot;6:9=5&quot;)
svy$k6b &lt;- recode(svy$k6b, &quot;6:9=5&quot;)
svy$k6c &lt;- recode(svy$k6c, &quot;6:9=5&quot;)
svy$k6d &lt;- recode(svy$k6d, &quot;6:9=5&quot;)
svy$k6e &lt;- recode(svy$k6e, &quot;6:9=5&quot;)
svy$k6f &lt;- recode(svy$k6f, &quot;6:9=5&quot;)

################################################################################
#
#  Reverse coding &amp; create K6 score (i.e. as the sum of individual item scores)
#
svy$k6a &lt;- 5 - svy$k6a
svy$k6b &lt;- 5 - svy$k6b
svy$k6c &lt;- 5 - svy$k6d
svy$k6d &lt;- 5 - svy$k6d
svy$k6e &lt;- 5 - svy$k6e
svy$k6f &lt;- 5 - svy$k6f
K6 &lt;- svy$k6a + svy$k6b + svy$k6c + svy$k6d + svy$k6e + svy$k6f

################################################################################
#
#  Apply case-definition for serious psychological distress(i.e. K6 &gt; 12)
#
K6Case &lt;- recode(K6, &quot;0:12=0; 13:hi=1&quot;)

################################################################################
#
#  Brief Community Screening Instrument for Dementia (CSID)
#
#  Indicators are :
#
#    DS  Probable dementia by CSID screen
#
#  The CSID dementia screening tool is described in :
#
#      Prince M, et al. (2010). A brief dementia screener suitable for use
#      by non-specialists in resource poor settings - The cross-cultural
#      derivation and validation of the brief Community Screening Instrument
#      for Dementia. International Journal of Geriatric Psychiatry, 26(9),
#      899–907
#

################################################################################
#
#  Recode scored components to 0 / 1 (with 1 = correct)
#
svy$ds1  &lt;- recode(svy$ds1,  &quot;1=1; else=0&quot;) # Nose
svy$ds2  &lt;- recode(svy$ds2,  &quot;1=1; else=0&quot;) # Hammer
svy$ds3  &lt;- recode(svy$ds3,  &quot;1=1; else=0&quot;) # Day of week
svy$ds4  &lt;- recode(svy$ds4,  &quot;1=1; else=0&quot;) # Season
svy$ds5  &lt;- recode(svy$ds5,  &quot;1=1; else=0&quot;) # Point to window then door
svy$ds6a &lt;- recode(svy$ds6a, &quot;1=1; else=0&quot;) # Memory &quot;CHILD&quot;
svy$ds6b &lt;- recode(svy$ds6b, &quot;1=1; else=0&quot;) # Memory &quot;HOUSE&quot;
svy$ds6c &lt;- recode(svy$ds6c, &quot;1=1; else=0&quot;) # Memory &quot;ROAD&quot;

################################################################################
#
#  Sum correct items into CSID score
#
scoreCSID &lt;- svy$ds1 + svy$ds2 + svy$ds3 + svy$ds4 + svy$ds5 + svy$ds6a + svy$ds6b + svy$ds6c

#################################################################################
#
#  Classify dementia : 
#
#    0 = Normal (not probable dementia)
#    1 = Probable dementia
#
DS &lt;- recode(scoreCSID, &quot;0:4=1; 5:8=0&quot;)

################################################################################
#
#  Clean-up
#
rm(scoreCSID)

################################################################################
#
#  Health and health-seeking indicators
#
#  Indicators are : 
#
#    H1   Chronic condition
#
#    H2   Takes drugs regularly for chronic condition
#
#    H3x  Main reason for not taking drugs for chronic condition where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#
#    H4   Recent disease episode
#
#    H5   Accessed care for recent disease episode
#
#    H6x  Main reason for not accessing care for recent disease episode where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#

################################################################################
#
#  Health indicators : CHRONIC CONDITIONS
#
svy$h1 &lt;- recode(svy$h1, &quot;1=1; else=2&quot;)
H1 &lt;- recode(svy$h1, &quot;1=1; else=0&quot;)
H2 &lt;- ifelse(H1 == 0, NA, recode(svy$h2, &quot;1=1; else=0&quot;))
H3 &lt;- ifelse(H2 == 1, NA, recode(svy$h3, &quot;NA=9&quot;))
#
# Indicators for main reason for NOT taking drugs for chronic condition
#
H31 &lt;- recode(H3, &quot;1=1; NA=NA; else=0&quot;)
H32 &lt;- recode(H3, &quot;2=1; NA=NA; else=0&quot;)
H33 &lt;- recode(H3, &quot;3=1; NA=NA; else=0&quot;)
H34 &lt;- recode(H3, &quot;4=1; NA=NA; else=0&quot;)
H35 &lt;- recode(H3, &quot;5=1; NA=NA; else=0&quot;)
H36 &lt;- recode(H3, &quot;6=1; NA=NA; else=0&quot;)
H37 &lt;- recode(H3, &quot;7=1; NA=NA; else=0&quot;)
H38 &lt;- recode(H3, &quot;8=1; NA=NA; else=0&quot;)
H39 &lt;- recode(H3, &quot;9=1; NA=NA; else=0&quot;)

################################################################################
#
#  Health indicators : RECENT DISEASE EPISODE
#
svy$h4 &lt;- recode(svy$h4, &quot;1=1; else=2&quot;)
H4 &lt;- recode(svy$h4, &quot;1=1; else=0&quot;)
H5 &lt;- ifelse(H4 == 0, NA, recode(svy$h5, &quot;1=1; else=0&quot;))
H6 &lt;- ifelse(H5 == 1, NA, recode(svy$h6, &quot;NA=9&quot;))
#
#
# Indicators for main reason for NOT accessing care for recent disease episode
#
H61 &lt;- recode(H6, &quot;1=1; NA=NA; else=0&quot;)
H62 &lt;- recode(H6, &quot;2=1; NA=NA; else=0&quot;)
H63 &lt;- recode(H6, &quot;3=1; NA=NA; else=0&quot;)
H64 &lt;- recode(H6, &quot;4=1; NA=NA; else=0&quot;)
H65 &lt;- recode(H6, &quot;5=1; NA=NA; else=0&quot;)
H66 &lt;- recode(H6, &quot;6=1; NA=NA; else=0&quot;)
H67 &lt;- recode(H6, &quot;7=1; NA=NA; else=0&quot;)
H68 &lt;- recode(H6, &quot;8=1; NA=NA; else=0&quot;)
H69 &lt;- recode(H6, &quot;9=1; NA=NA; else=0&quot;)

#
# Clean-up
#
rm(H3, H6)

###############################################################################
#
#  Income and income sources
#
#  Indicators are :
#
#    M1   Has a personal income
#    M2A  Agriculture / fishing / livestock
#    M2B  Wages / salary
#    M2C  Sale of charcoal / bricks / &amp;c.
#    M2D  Trading (e.g. market or shop)
#    M2E  Investments
#    M2F  Spending savings / sale of assets
#    M2G  Charity
#    M2H  Cash transfer / Social security
#    M2I  Other
#

################################################################################
#
#  Create binary indicators
#
M1  &lt;- recode(svy$m1,  &quot;1=1; else=0&quot;) # Has a personal income
M2A &lt;- recode(svy$m2a, &quot;1=1; else=0&quot;) # Agriculture / fishing / livestock
M2B &lt;- recode(svy$m2b, &quot;1=1; else=0&quot;) # Wages / salary
M2C &lt;- recode(svy$m2c, &quot;1=1; else=0&quot;) # Sale of charcoal / bricks / &amp;c.
M2D &lt;- recode(svy$m2d, &quot;1=1; else=0&quot;) # Trading (e.g. market or shop)
M2E &lt;- recode(svy$m2e, &quot;1=1; else=0&quot;) # Investments
M2F &lt;- recode(svy$m2f, &quot;1=1; else=0&quot;) # Spending savings / sale of assets
M2G &lt;- recode(svy$m2g, &quot;1=1; else=0&quot;) # Charity
M2H &lt;- recode(svy$m2h, &quot;1=1; else=0&quot;) # Cash transfer / social security
M2I &lt;- recode(svy$m2i, &quot;1=1; else=0&quot;) # Other

################################################################################
#
#  Check for any income (return &apos;correct&apos; result in M1)
#
checkForIncome &lt;- M1 + M2A + M2B + M2C + M2D + M2E + M2F + M2G + M2H + M2I
M1 &lt;- ifelse(checkForIncome &gt; 0, 1, 0)

################################################################################
#
# Clean-up
#
rm(checkForIncome)

################################################################################
#
#  Water, Sanitation, and Hygiene (WASH) indicators
#
#  Indicators are :
#
#      W1  Improved source of drinking water
#      W2  Safe drinking water (improved source OR adequate treatment)
#      W3  Improved sanitation facility
#      W4  Improved non-shared sanitation facility
#
#  These are a (core) subset of indicators from :
#
#     WHO / UNICEF (2006). Core Questions on Drinking-water and Sanitation
#     for Household Surveys. Geneva, WHO / UNICEF
#

################################################################################
#
#  Recode WASH data
#
svy$w1 &lt;- recode(svy$w1, &quot;1=1; else=0&quot;)
svy$w2 &lt;- recode(svy$w2, &quot;1=1; else=0&quot;)
svy$w3 &lt;- recode(svy$w3, &quot;1=1; else=0&quot;)
svy$w4 &lt;- recode(svy$w4, &quot;1=1; else=0&quot;)

################################################################################
#
#  Create WASH indicators
#
W1 &lt;- svy$w1
W2 &lt;- ifelse(svy$w1 == 1 | svy$w2 == 1, 1, 0)
W3 &lt;- svy$w3
W4 &lt;- ifelse(svy$w3 == 1 &amp; svy$w4 != 1, 1, 0)

################################################################################
#
#  Anthropometry and screening
#
#  Indicators are :
#
#    MUAC      MUAC
#    oedema    Bilateral pitting oedema (may not be nutritional)
#    screened  Either MUAC or oedema checked previously
#

################################################################################
#
#  Censor REFUSAL, NOT APPLICABLE, and MISSING values codes in MUAC and Oedema
#
MUAC &lt;- recode(svy$as1, &quot;777=NA; 888=NA; 999=NA&quot;)
oedema &lt;- recode(svy$as3, &quot;1=1; else=0&quot;)

################################################################################
#
#  Screening for GAM, MAM, SAM (i.e. either MUAC or oedema checked previously)
#
screened &lt;- ifelse(svy$as2 == 1 | svy$as4 == 1, 1, 0)

################################################################################
#
#  Visual impairment by &quot;Tumbling E&quot; method
#
#  Indicators are :
#
#    poorVA  Poor visual acuity (correct in &lt; 3 of 4 tests)
#
#  Refusal and blindness are treated as test failures
#
#  The &quot;Tumbling E&quot; method is described in :
#
#    Taylor HR (1978). Applying new design principles to the construction of an
#    illiterate E Chart. Am J Optom &amp; Physiol Optics 55:348
#

################################################################################
#
#  Create binary indicators
#
svy$va2a &lt;- recode(svy$va2a, &quot;1=1; else=0&quot;)
svy$va2b &lt;- recode(svy$va2b, &quot;1=1; else=0&quot;)
svy$va2c &lt;- recode(svy$va2c, &quot;1=1; else=0&quot;)
svy$va2d &lt;- recode(svy$va2d, &quot;1=1; else=0&quot;)
sumVA &lt;- svy$va2a + svy$va2b + svy$va2c + svy$va2d
poorVA &lt;-  ifelse(sumVA &lt; 3, 1, 0)

###############################################################################
#
#  Clean-up
#
rm(sumVA)

################################################################################
#
#  Miscellaneous indicators
#
#  Indicators are : 
#
#    chew  Problems chewing food
#    food  Anyone in HH receives a ration
#    NFRI  Anyone in HH received non-food relief item(s) in previous month
#
chew &lt;- recode(svy$a8, &quot;1=1; else=0&quot;)
food &lt;- recode(svy$f6, &quot;1=1; else=0&quot;)
NFRI &lt;- recode(svy$f7, &quot;1=1; else=0&quot;)



################################################################################
#
#  Washington Group (WG) short set of question designed to identify people with a
#  disability in a census or survey format.
#
#  See:
#
#    http://www.washingtongroup-disability.com
#
#    https://www.cdc.gov/nchs/washington_group/wg_documents.htm
#
#  for details.
#

################################################################################
#
# Missing values
#
svy$wg1 &lt;- recode(svy$wg1, &quot;9=0; NA=0&quot;)
svy$wg2 &lt;- recode(svy$wg2, &quot;9=0; NA=0&quot;)
svy$wg3 &lt;- recode(svy$wg3, &quot;9=0; NA=0&quot;)
svy$wg4 &lt;- recode(svy$wg4, &quot;9=0; NA=0&quot;)
svy$wg5 &lt;- recode(svy$wg5, &quot;9=0; NA=0&quot;)
svy$wg6 &lt;- recode(svy$wg6, &quot;9=0; NA=0&quot;)

################################################################################
#
# Vision domain
#
wgVisionD0 &lt;- ifelse(svy$wg1 == 0, 1, 0)
wgVisionD1 &lt;- ifelse(svy$wg1 == 1 | svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD2 &lt;- ifelse(svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD3 &lt;- ifelse(svy$wg1 == 3, 1, 0)

################################################################################
#
# Hearing domain
#
wgHearingD0 &lt;- ifelse(svy$wg2 == 0, 1, 0)
wgHearingD1 &lt;- ifelse(svy$wg2 == 1 | svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD2 &lt;- ifelse(svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD3 &lt;- ifelse(svy$wg2 == 3, 1, 0)

################################################################################
#
# Mobility domain
#
wgMobilityD0 &lt;- ifelse(svy$wg3 == 0, 1, 0)
wgMobilityD1 &lt;- ifelse(svy$wg3 == 1 | svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD2 &lt;- ifelse(svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD3 &lt;- ifelse(svy$wg3 == 3, 1, 0)


################################################################################
#
# Remembering domain
#
wgRememberingD0 &lt;- ifelse(svy$wg4 == 0, 1, 0)
wgRememberingD1 &lt;- ifelse(svy$wg4 == 1 | svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD2 &lt;- ifelse(svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD3 &lt;- ifelse(svy$wg4 == 3, 1, 0)

################################################################################
#
# Self-care domain
#
wgSelfCareD0 &lt;- ifelse(svy$wg5 == 0, 1, 0)
wgSelfCareD1 &lt;- ifelse(svy$wg5 == 1 | svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD2 &lt;- ifelse(svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD3 &lt;- ifelse(svy$wg5 == 3, 1, 0)

################################################################################
#
# Communicating domain
#
wgCommunicatingD0 &lt;- ifelse(svy$wg6 == 0, 1, 0)
wgCommunicatingD1 &lt;- ifelse(svy$wg6 == 1 | svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD2 &lt;- ifelse(svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD3 &lt;- ifelse(svy$wg6 == 3, 1, 0)

################################################################################
#
# Overall prevalence
#
wgP0 &lt;- ifelse(wgVisionD0 + wgHearingD0 + wgMobilityD0 + wgRememberingD0 + wgSelfCareD0 + wgCommunicatingD0 == 6, 1, 0)
wgP1 &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  0, 1, 0)
wgP2 &lt;- ifelse(wgVisionD2 + wgHearingD2 + wgMobilityD2 + wgRememberingD2 + wgSelfCareD2 + wgCommunicatingD2 &gt;  0, 1, 0)
wgP3 &lt;- ifelse(wgVisionD3 + wgHearingD3 + wgMobilityD3 + wgRememberingD3 + wgSelfCareD3 + wgCommunicatingD3 &gt;  0, 1, 0)
wgPM &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  1, 1, 0)





################################################################################
#
#  Make summary data.frame for ALL respondents
#
indicators.ALL &lt;- data.frame(psu, resp1, resp2, resp3, resp4,
                            age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
                            marital1, marital2, marital3, marital4, marital5, marital6, 
                            alone,
                            MF, DDS,
                            FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
                            proteinRich, pProtein, aProtein,
                            pVitA, aVitA, xVitA,
                            ironRich,
                            caRich,
                            znRich,
                            vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
                            HHS1, HHS2, HHS3,
                            ADL01, ADL02, ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
                            K6, K6Case,
                            DS,
                            H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
                            H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
                            M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
                            W1, W2, W3, W4,
                            MUAC, oedema, screened,
                            poorVA,
                            chew, food, NFRI,
                            wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
                            wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
                            wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
                            wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
                            wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
                            wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
					   wgP0, wgP1, wgP2, wgP3, wgPM)

#
# Subset summary data.frames for MALES and FEMALES
#
indicators.MALES   &lt;- subset(indicators.ALL, sex1 == 1)
indicators.FEMALES &lt;- subset(indicators.ALL, sex2 == 1)

#
# Clean-up
#
rm(psu, resp1, resp2, resp3, resp4,
   age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
   marital1, marital2, marital3, marital4, marital5, marital6,
   alone,
   MF, DDS,
   FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
   proteinRich, pProtein, aProtein,
   pVitA, aVitA, xVitA,
   ironRich,
   caRich,
   znRich,
   vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
   HHS1, HHS2, HHS3,
   ADL01, ADL02,  ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
   K6, K6Case,
   DS,
   H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
   H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
   M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
   W1, W2, W3, W4,
   MUAC, oedema, screened,
   poorVA,
   chew, food, NFRI,
   wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
   wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
   wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
   wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
   wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
   wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
   wgP0, wgP1, wgP2, wgP3, wgPM)
gc()

#
# Restore &apos;svy&apos; from back-up copy (i.e. to undo recoding used when making indicators)
#
svy &lt;- svyBackup

#
# Parameter list (indicator names) and output column names for bootstrapping
#
params &lt;- c(&quot;resp1&quot;, &quot;resp2&quot;, &quot;resp3&quot;, &quot;resp4&quot;,
            &quot;age&quot;, &quot;ageGrp1&quot;, &quot;ageGrp2&quot;, &quot;ageGrp3&quot;, &quot;ageGrp4&quot;, &quot;ageGrp5&quot;, &quot;sex1&quot;, &quot;sex2&quot;,
            &quot;marital1&quot;, &quot;marital2&quot;, &quot;marital3&quot;, &quot;marital4&quot;, &quot;marital5&quot;, &quot;marital6&quot;,
            &quot;alone&quot;,
            &quot;MF&quot;, &quot;DDS&quot;, &quot;FG01&quot;, &quot;FG02&quot;, &quot;FG03&quot;, &quot;FG04&quot;, &quot;FG05&quot;, &quot;FG06&quot;, &quot;FG07&quot;,
            &quot;FG08&quot;, &quot;FG09&quot;, &quot;FG10&quot;, &quot;FG11&quot;, &quot;proteinRich&quot;, &quot;pProtein&quot;, &quot;aProtein&quot;,
            &quot;pVitA&quot;, &quot;aVitA&quot;, &quot;xVitA&quot;,
            &quot;ironRich&quot;,
            &quot;caRich&quot;,
            &quot;znRich&quot;,
            &quot;vitB1&quot;, &quot;vitB2&quot;, &quot;vitB3&quot;, &quot;vitB6&quot;, &quot;vitB12&quot;, &quot;vitBcomplex&quot;,
            &quot;HHS1&quot;, &quot;HHS2&quot;, &quot;HHS3&quot;,
            &quot;ADL01&quot;, &quot;ADL02&quot;, &quot;ADL03&quot;, &quot;ADL04&quot;, &quot;ADL05&quot;, &quot;ADL06&quot;, &quot;scoreADL&quot;, &quot;classADL1&quot;, &quot;classADL2&quot;, &quot;classADL3&quot;, &quot;hasHelp&quot;, &quot;unmetNeed&quot;,
            &quot;K6&quot;, &quot;K6Case&quot;, &quot;DS&quot;,
            &quot;H1&quot;, &quot;H2&quot;, &quot;H31&quot;, &quot;H32&quot;, &quot;H33&quot;, &quot;H34&quot;, &quot;H35&quot;, &quot;H36&quot;, &quot;H37&quot;, &quot;H38&quot;, &quot;H39&quot;,
            &quot;H4&quot;, &quot;H5&quot;, &quot;H61&quot;, &quot;H62&quot;, &quot;H63&quot;, &quot;H64&quot;, &quot;H65&quot;, &quot;H66&quot;, &quot;H67&quot;, &quot;H68&quot;, &quot;H69&quot;,
            &quot;M1&quot;, &quot;M2A&quot;, &quot;M2B&quot;, &quot;M2C&quot;, &quot;M2D&quot;, &quot;M2E&quot;, &quot;M2F&quot;, &quot;M2G&quot;, &quot;M2H&quot;, &quot;M2I&quot;,
            &quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;,
            &quot;MUAC&quot;, &quot;oedema&quot;, &quot;screened&quot;,
            &quot;poorVA&quot;,
            &quot;chew&quot;, &quot;food&quot;, &quot;NFRI&quot;,
		  &quot;wgVisionD0&quot;, &quot;wgVisionD1&quot;, &quot;wgVisionD2&quot;, &quot;wgVisionD3&quot;,
	 	  &quot;wgHearingD0&quot;, &quot;wgHearingD1&quot;, &quot;wgHearingD2&quot;, &quot;wgHearingD3&quot;,
		  &quot;wgMobilityD0&quot;, &quot;wgMobilityD1&quot;, &quot;wgMobilityD2&quot;, &quot;wgMobilityD3&quot;,
		  &quot;wgRememberingD0&quot;, &quot;wgRememberingD1&quot;, &quot;wgRememberingD2&quot;, &quot;wgRememberingD3&quot;,
		  &quot;wgSelfCareD0&quot;, &quot;wgSelfCareD1&quot;, &quot;wgSelfCareD2&quot;, &quot;wgSelfCareD3&quot;, 
		  &quot;wgCommunicatingD0&quot;, &quot;wgCommunicatingD1&quot;, &quot;wgCommunicatingD2&quot;, &quot;wgCommunicatingD3&quot;,
		  &quot;wgP0&quot;, &quot;wgP1&quot;, &quot;wgP2&quot;, &quot;wgP3&quot;, &quot;wgPM&quot;)

#
# Blocking weighted bootstap estimates (ALL, MALES, FEMALES)
#
boot.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)
boot.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)
boot.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)

#
# Extract estimates from &apos;boot.*&apos; data.frames
#
estimates.ALL &lt;- data.frame(t(apply(boot.ALL, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.MALES &lt;- data.frame(t(apply(boot.MALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.FEMALES &lt;- data.frame(t(apply(boot.FEMALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))

# 
# Join &apos;estimates.*&apos; data.frames side-by-side
#
classicEstimates &lt;- data.frame(estimates.ALL, estimates.MALES, estimates.FEMALES)

#
# Clean-up row and column names
#
classicEstimates$indicator &lt;- row.names(classicEstimates)
row.names(classicEstimates) &lt;- NULL
names(classicEstimates) &lt;- c(&quot;LCL.ALL&quot;, &quot;EST.ALL&quot;, &quot;UCL.ALL&quot;, &quot;LCL.MALES&quot;, &quot;EST.MALES&quot;, &quot;UCL.MALES&quot;, &quot;LCL.FEMALES&quot;, &quot;EST.FEMALES&quot;, &quot;UCL.FEMALES&quot;, &quot;INDICATOR&quot;)

#
# Clean-up
#
rm(boot.ALL, boot.MALES, boot.FEMALES, estimates.ALL, estimates.MALES, estimates.FEMALES, params)
gc()

#
# Parameter list (indicator names) and output column names for bootstrapping
#
params &lt;- c(&quot;MUAC&quot;)

#
# Blocking weighted bootstrap (GAM)
#
THRESHOLD &lt;- 210
bootGAM.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootGAM.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootGAM.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
names(bootGAM.ALL) &lt;- names(bootGAM.MALES) &lt;- names(bootGAM.FEMALES) &lt;- &quot;GAM&quot;

#
# Blocking weighted bootstrap (SAM)
#
THRESHOLD &lt;- 185
bootSAM.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootSAM.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootSAM.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
names(bootSAM.ALL) &lt;- names(bootSAM.MALES) &lt;- names(bootSAM.FEMALES) &lt;- &quot;SAM&quot;

#
# MAM is GAM - SAM
#
bootMAM.ALL &lt;- bootGAM.ALL - bootSAM.ALL
bootMAM.MALES &lt;- bootGAM.MALES - bootSAM.MALES
bootMAM.FEMALES &lt;- bootGAM.FEMALES - bootSAM.FEMALES
names(bootMAM.ALL) &lt;- names(bootMAM.MALES) &lt;- names(bootMAM.FEMALES) &lt;- &quot;MAM&quot;
#
# Fix for MAM &lt; 0 (may occur if bootstrap GAM &lt; bootstrap SAM)
#
bootMAM.ALL$MAM[bootMAM.ALL$MAM &lt; 0] &lt;- 0
bootMAM.MALES$MAM[bootMAM.MALES$MAM &lt; 0] &lt;- 0
bootMAM.FEMALES$MAM[bootMAM.FEMALES$MAM &lt; 0] &lt;- 0

#
# Combine &apos;bootGAM.*&apos;, &apos;bootMAM.*&apos;, and &apos;booSAM.*&apos; data.frames (ALL, MALES, FEMALES)
#
boot.ALL &lt;- data.frame(bootGAM.ALL, bootMAM.ALL, bootSAM.ALL)
boot.MALES &lt;- data.frame(bootGAM.MALES, bootMAM.MALES, bootSAM.MALES)
boot.FEMALES &lt;- data.frame(bootGAM.FEMALES, bootMAM.FEMALES, bootSAM.FEMALES)
rm(bootGAM.ALL, bootMAM.ALL, bootSAM.ALL, bootGAM.MALES, bootMAM.MALES, bootSAM.MALES, bootGAM.FEMALES, bootMAM.FEMALES, bootSAM.FEMALES)

#
# Extract estimates from &apos;boot.*&apos; data.frames
#
estimates.ALL &lt;- data.frame(t(apply(boot.ALL, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.MALES &lt;- data.frame(t(apply(boot.MALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.FEMALES &lt;- data.frame(t(apply(boot.FEMALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))

# 
# Join &apos;estimates.*&apos; data.frames side-by-side
#
probitEstimates &lt;- data.frame(estimates.ALL, estimates.MALES, estimates.FEMALES)

#
# Clean-up row and column names
#
probitEstimates$indicator &lt;- row.names(probitEstimates)
row.names(probitEstimates) &lt;- NULL
names(probitEstimates) &lt;- c(&quot;LCL.ALL&quot;, &quot;EST.ALL&quot;, &quot;UCL.ALL&quot;, &quot;LCL.MALES&quot;, &quot;EST.MALES&quot;, &quot;UCL.MALES&quot;, &quot;LCL.FEMALES&quot;, &quot;EST.FEMALES&quot;, &quot;UCL.FEMALES&quot;, &quot;INDICATOR&quot;)

#
# Clean-up
#
rm(params, THRESHOLD, boot.ALL, boot.MALES, boot.FEMALES, estimates.ALL, estimates.MALES, estimates.FEMALES)
gc()

#
# Concatenate classic and PROBIT estimates into a single data.frame
#
estimates &lt;- rbind(classicEstimates, probitEstimates)

#
# Merge &apos;estimates&apos; data.frame and &apos;language&apos; data.frame in prepartion for reporting
# and maintaining the original row ordering of the &apos;language&apos; data.frame ...
#
language$originalOrder &lt;- 1:nrow(estimates)
estimates &lt;- merge(estimates, language, by = &quot;INDICATOR&quot;)
estimates &lt;- estimates[order(estimates$originalOrder), ]
estimates &lt;- subset(estimates, select = -originalOrder)

#
# Clean-up
#
rm(classicEstimates, probitEstimates)

#
# Open file for output
#
options(width = 132)
reportFilename &lt;- paste(FILENAME, &quot;.report.csv&quot;, sep=&quot;&quot;)
sink(reportFilename, append = FALSE, type = &quot;output&quot;)

#
# Present results by indicator group
#
for(i in unique(estimates$GROUP))
  {
  #
  # Select results for current indicator group
  #
  x &lt;- subset(estimates, GROUP == i)
  #
  # Header for current indicator group
  #
  cat(&quot;,,,,,,,,,,\n&quot;)
  cat(i, &quot;,,,,,,,,,,\n&quot;, sep = &quot;&quot;)
  cat(&quot;,,ALL,,,MALES,,,FEMALES,,\n&quot;)
  cat(&quot;INDICATOR,TYPE,EST,LCL,UCL,EST,LCL,UCL,EST,LCL,UCL\n&quot;)
  #
  # Report line for each indicator in this indicator group
  #
  for(j in 1:nrow(x))
    {
    #
    # Present results for a single indicator
    #
    cat(x$LABEL[j], &quot;,&quot;, x$TYPE[j], &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.FEMALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.FEMALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.FEMALES[j]))
    cat(&quot;\n&quot;)
    }
  }

#
# Close report file
#
sink()

#
# Clean-up
#
rm(reportFilename, i, j, x)

#
# Temporary variables
#
sexText &lt;- ifelse(indicators.ALL$sex1 == 1, &quot;Male&quot;, &quot;Female&quot;)
ageGroup &lt;- recode(indicators.ALL$age, &quot;50:59=&apos;50:59&apos;; 60:69=&apos;60:69&apos;; 70:79=&apos;70:79&apos;; 80:89=&apos;80:89&apos;; 90:hi=&apos;90+&apos;; else=NA&quot;)

#
# Age BY sex (pyramid plot)
#
plotFileName &lt;- paste(FILENAME, &quot;.AgeBySex.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 12)
par(pty = &quot;m&quot;); par(mar = c(5, 4, 2, 2) + 0.1)
pyramid.plot(ageGroup, sexText, main = &quot;&quot;, xlab = &quot;Sex (Females | Males)&quot;, ylab = &quot;Age group (years)&quot;)
dev.off()
rm(plotFileName)

#
# Distribution of MUAC (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.MUAC.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
hist(indicators.ALL$MUAC, breaks = 20, xlim = c(160, max(indicators.ALL$MUAC, na.rm = TRUE)), main = &quot;&quot;, xlab = &quot;MUAC (mm)&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$MUAC ~ sexText,  main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;MUAC&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of meal frequency (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.MF.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$MF, values = 0:max(indicators.ALL$MF, na.rm = TRUE)), main = &quot;&quot;, xlab = &quot;Meal frequency&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$MF ~ sexText,  main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Meal frequency&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of DDS (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.DDS.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$DDS, values = 0:max(indicators.ALL$DDS)), main = &quot;&quot;, xlab = &quot;Dietary diversity score&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$DDS ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Dietary diversity score&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of K6 (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.K6.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
hist(indicators.ALL$K6, main = &quot;&quot;, xlab = &quot;K6&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$K6 ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;K6&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of ADL (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.ADL.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$scoreADL, values = 0:6), main = &quot;&quot;,  xlab = &quot;Katz ADL Score&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$scoreADL ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Katz ADL Score&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Sources of income (by sex)
#
tabM &lt;- NULL
tabM &lt;- c(tabM, table(indicators.MALES$M2A)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2B)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2C)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2D)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2E)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2F)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2G)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2H)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2I)[&quot;1&quot;])
tabM[is.na(tabM)] &lt;- 0
tabF &lt;- NULL
tabF &lt;- c(tabF, table(indicators.FEMALES$M2A)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2B)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2C)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2D)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2E)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2F)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2G)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2H)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2I)[&quot;1&quot;])
tabF[is.na(tabF)] &lt;- 0
#
# Merge data for males (tabM) and females (tabF)
#
tab &lt;- data.frame(tabM, tabF)
names(tab) &lt;- c(&quot;M&quot;, &quot;F&quot;)
tab$SUM &lt;- tab$M + tab$F
#
# Label rows with income source
#
rownames(tab) &lt;- c(&quot;Agriculture / fishing / livestock&quot;,
                   &quot;Wage / salary&quot;,
                   &quot;Sales of charcoal / bricks / &amp;c.&quot;,
                   &quot;Trading (e.g. market or shop)&quot;,
                   &quot;Investments&quot;,
                   &quot;Spending savings / sales of assets&quot;,
                   &quot;Charity&quot;,
                   &quot;Cash transfer / social security&quot;,
                   &quot;Other source(s) of income&quot;)
#
# Sort by frequency of income source (descending)
#
tab &lt;- tab[rev(order(tab$SUM)), ]
#
# Convert data.frame to a table for plotting using the &apos;barplot()&apos; function
#
tab &lt;- as.table(as.matrix(tab[ ,1:2]))
#
# Plot income sources by sex
#
plotFileName &lt;- paste(FILENAME, &quot;.Incomes.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
par(pty = &quot;m&quot;); par(las = 1); par(cex.axis = 0.8); par(mar = c(3, 12, 2, 2) + 0.1)
barplot(t(tab), col = c(&quot;lightgray&quot;, &quot;white&quot;), horiz = TRUE, main = &quot;&quot;, xlab = &quot;Frequency (males are shaded)&quot;, ylab = &quot;&quot;)
dev.off()
rm(plotFileName, tab, tabF, tabM)

#
# WASH
#
plotFileName &lt;- paste(FILENAME, &quot;.WASH.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(2, 2))
par(cex.axis = 0.8)
tab &lt;- table(indicators.ALL$W1)
names(tab) &lt;- c(&quot;Not improved&quot;, &quot;Improved&quot;)
barplot(tab, main = &quot;Source of drinking water&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W2)
names(tab) &lt;- c(&quot;Unsafe&quot;, &quot;Safe&quot;)
barplot(tab, main = &quot;Safe drinking water&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W3)
names(tab) &lt;- c(&quot;Not improved&quot;, &quot;Improved&quot;)
barplot(tab, main = &quot;Improved sanitation facility&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W4)
names(tab) &lt;- c(&quot;Not improved\nor shared&quot;, &quot;Improved and\nnot shared&quot;)
barplot(tab, main = &quot;Improved and non-shared\nsanitation facility&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
dev.off()
rm(plotFileName, tab)

#
# Dementia screen (CSID)
#
plotFileName &lt;- paste(FILENAME, &quot;.dementia.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
tab &lt;- table(indicators.ALL$DS)
names(tab) &lt;- c(&quot;Normal&quot;, &quot;Probable dementia&quot;)
barplot(tab, main = &quot;&quot;, col = c(&quot;green&quot;, &quot;red&quot;), ylab = &quot;Frequency&quot;)
dev.off()
rm(plotFileName, tab)

#
# Disability (Washington Group)
#
plotFileName &lt;- paste(FILENAME, &quot;.disability.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
P0 &lt;- table(indicators.ALL$wgP0)[&quot;1&quot;]
P1 &lt;- table(indicators.ALL$wgP1)[&quot;1&quot;]
P2 &lt;- table(indicators.ALL$wgP2)[&quot;1&quot;]
P3 &lt;- table(indicators.ALL$wgP3)[&quot;1&quot;]
PM &lt;- table(indicators.ALL$wgPM)[&quot;1&quot;]
tab &lt;- as.table(c(P0, P1, P2, P3, PM))
names(tab) &lt;- c(&quot;\nP0 : None &quot;, &quot;\nP1 : Any&quot;, &quot;P2 : Moderate\nor severe&quot;, &quot;\nP3 : Severe&quot;, &quot;\nPM : Multiple&quot;)
barplot(tab, main = &quot;&quot;, col = &quot;lightgray&quot;, ylab = &quot;Frequency&quot;, cex.names = 0.8)
dev.off()
rm(plotFileName, P0, P1, P2, P3, PM, tab)

#
# Hunger (HHS)
#
plotFileName &lt;- paste(FILENAME, &quot;.HHS.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
H0 &lt;- table(indicators.ALL$wgP0)[&quot;1&quot;]
H1 &lt;- table(indicators.ALL$wgP1)[&quot;1&quot;]
H2 &lt;- table(indicators.ALL$wgP2)[&quot;1&quot;]
tab &lt;- as.table(c(H0, H1, H2))
names(tab) &lt;- c(&quot;Little or none&quot;, &quot;Moderate&quot;, &quot;Severe&quot;)
barplot(tab, main = &quot;&quot;, col = c(&quot;green&quot;, &quot;orange&quot;, &quot;red&quot;), ylab = &quot;Frequency&quot;, cex.names = 0.8)
dev.off()
rm(plotFileName, H0, H1, H2, tab)

#
# Clean-up
#
rm(sexText, ageGroup)
gc()

</command>
			<property title="Report" shape="MODEL">
				<comment state="opened" x="50" y="-10">Produce survey report</comment>
			</property>
			<option type="com.ef_prime.rflow.node.base.SubflowNodeModel">
				<subflow>
					<graph version="0.8" width="1619" height="529" locationtype="a" offsetx="260" offsety="191">
						<node id="4" date="1421942680854" uid="18d7138f01dcd2c7" x="-50" y="10">
							<command></command>
							<property/>
							<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
								<entry key="io">in</entry>
							</option>
						</node>
						<node id="5" date="1421835449595" uid="92eae06c84bcae5c" x="110" y="10">
							<command>#
# Parameter list (indicator names) and output column names for bootstrapping
#
params &lt;- c(&quot;resp1&quot;, &quot;resp2&quot;, &quot;resp3&quot;, &quot;resp4&quot;,
            &quot;age&quot;, &quot;ageGrp1&quot;, &quot;ageGrp2&quot;, &quot;ageGrp3&quot;, &quot;ageGrp4&quot;, &quot;ageGrp5&quot;, &quot;sex1&quot;, &quot;sex2&quot;,
            &quot;marital1&quot;, &quot;marital2&quot;, &quot;marital3&quot;, &quot;marital4&quot;, &quot;marital5&quot;, &quot;marital6&quot;,
            &quot;alone&quot;,
            &quot;MF&quot;, &quot;DDS&quot;, &quot;FG01&quot;, &quot;FG02&quot;, &quot;FG03&quot;, &quot;FG04&quot;, &quot;FG05&quot;, &quot;FG06&quot;, &quot;FG07&quot;,
            &quot;FG08&quot;, &quot;FG09&quot;, &quot;FG10&quot;, &quot;FG11&quot;, &quot;proteinRich&quot;, &quot;pProtein&quot;, &quot;aProtein&quot;,
            &quot;pVitA&quot;, &quot;aVitA&quot;, &quot;xVitA&quot;,
            &quot;ironRich&quot;,
            &quot;caRich&quot;,
            &quot;znRich&quot;,
            &quot;vitB1&quot;, &quot;vitB2&quot;, &quot;vitB3&quot;, &quot;vitB6&quot;, &quot;vitB12&quot;, &quot;vitBcomplex&quot;,
            &quot;HHS1&quot;, &quot;HHS2&quot;, &quot;HHS3&quot;,
            &quot;ADL01&quot;, &quot;ADL02&quot;, &quot;ADL03&quot;, &quot;ADL04&quot;, &quot;ADL05&quot;, &quot;ADL06&quot;, &quot;scoreADL&quot;, &quot;classADL1&quot;, &quot;classADL2&quot;, &quot;classADL3&quot;, &quot;hasHelp&quot;, &quot;unmetNeed&quot;,
            &quot;K6&quot;, &quot;K6Case&quot;, &quot;DS&quot;,
            &quot;H1&quot;, &quot;H2&quot;, &quot;H31&quot;, &quot;H32&quot;, &quot;H33&quot;, &quot;H34&quot;, &quot;H35&quot;, &quot;H36&quot;, &quot;H37&quot;, &quot;H38&quot;, &quot;H39&quot;,
            &quot;H4&quot;, &quot;H5&quot;, &quot;H61&quot;, &quot;H62&quot;, &quot;H63&quot;, &quot;H64&quot;, &quot;H65&quot;, &quot;H66&quot;, &quot;H67&quot;, &quot;H68&quot;, &quot;H69&quot;,
            &quot;M1&quot;, &quot;M2A&quot;, &quot;M2B&quot;, &quot;M2C&quot;, &quot;M2D&quot;, &quot;M2E&quot;, &quot;M2F&quot;, &quot;M2G&quot;, &quot;M2H&quot;, &quot;M2I&quot;,
            &quot;W1&quot;, &quot;W2&quot;, &quot;W3&quot;, &quot;W4&quot;,
            &quot;MUAC&quot;, &quot;oedema&quot;, &quot;screened&quot;,
            &quot;poorVA&quot;,
            &quot;chew&quot;, &quot;food&quot;, &quot;NFRI&quot;,
		  &quot;wgVisionD0&quot;, &quot;wgVisionD1&quot;, &quot;wgVisionD2&quot;, &quot;wgVisionD3&quot;,
	 	  &quot;wgHearingD0&quot;, &quot;wgHearingD1&quot;, &quot;wgHearingD2&quot;, &quot;wgHearingD3&quot;,
		  &quot;wgMobilityD0&quot;, &quot;wgMobilityD1&quot;, &quot;wgMobilityD2&quot;, &quot;wgMobilityD3&quot;,
		  &quot;wgRememberingD0&quot;, &quot;wgRememberingD1&quot;, &quot;wgRememberingD2&quot;, &quot;wgRememberingD3&quot;,
		  &quot;wgSelfCareD0&quot;, &quot;wgSelfCareD1&quot;, &quot;wgSelfCareD2&quot;, &quot;wgSelfCareD3&quot;, 
		  &quot;wgCommunicatingD0&quot;, &quot;wgCommunicatingD1&quot;, &quot;wgCommunicatingD2&quot;, &quot;wgCommunicatingD3&quot;,
		  &quot;wgP0&quot;, &quot;wgP1&quot;, &quot;wgP2&quot;, &quot;wgP3&quot;, &quot;wgPM&quot;)

#
# Blocking weighted bootstap estimates (ALL, MALES, FEMALES)
#
boot.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)
boot.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)
boot.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootClassic, params = params, outputColumns = params, replicates = REPLICATES)

#
# Extract estimates from &apos;boot.*&apos; data.frames
#
estimates.ALL &lt;- data.frame(t(apply(boot.ALL, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.MALES &lt;- data.frame(t(apply(boot.MALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.FEMALES &lt;- data.frame(t(apply(boot.FEMALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))

# 
# Join &apos;estimates.*&apos; data.frames side-by-side
#
classicEstimates &lt;- data.frame(estimates.ALL, estimates.MALES, estimates.FEMALES)

#
# Clean-up row and column names
#
classicEstimates$indicator &lt;- row.names(classicEstimates)
row.names(classicEstimates) &lt;- NULL
names(classicEstimates) &lt;- c(&quot;LCL.ALL&quot;, &quot;EST.ALL&quot;, &quot;UCL.ALL&quot;, &quot;LCL.MALES&quot;, &quot;EST.MALES&quot;, &quot;UCL.MALES&quot;, &quot;LCL.FEMALES&quot;, &quot;EST.FEMALES&quot;, &quot;UCL.FEMALES&quot;, &quot;INDICATOR&quot;)

#
# Clean-up
#
rm(boot.ALL, boot.MALES, boot.FEMALES, estimates.ALL, estimates.MALES, estimates.FEMALES, params)
gc()
</command>
							<property title="CLASSIC" shape="SUMMARY"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="6" date="1421942680854" uid="f3ad577655afe42e" x="520" y="10">
							<command></command>
							<property/>
							<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
								<entry key="io">out</entry>
							</option>
						</node>
						<node id="7" date="1421862017774" uid="11f8267a9d3bbc1c" x="280" y="10">
							<command>#
# Concatenate classic and PROBIT estimates into a single data.frame
#
estimates &lt;- rbind(classicEstimates, probitEstimates)

#
# Merge &apos;estimates&apos; data.frame and &apos;language&apos; data.frame in prepartion for reporting
# and maintaining the original row ordering of the &apos;language&apos; data.frame ...
#
language$originalOrder &lt;- 1:nrow(estimates)
estimates &lt;- merge(estimates, language, by = &quot;INDICATOR&quot;)
estimates &lt;- estimates[order(estimates$originalOrder), ]
estimates &lt;- subset(estimates, select = -originalOrder)

#
# Clean-up
#
rm(classicEstimates, probitEstimates)
</command>
							<property title="Merge" shape="TRANSFORM"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="8" date="1422621668303" uid="9be2421652334cc0" x="440" y="10">
							<command>#
# Temporary variables
#
sexText &lt;- ifelse(indicators.ALL$sex1 == 1, &quot;Male&quot;, &quot;Female&quot;)
ageGroup &lt;- recode(indicators.ALL$age, &quot;50:59=&apos;50:59&apos;; 60:69=&apos;60:69&apos;; 70:79=&apos;70:79&apos;; 80:89=&apos;80:89&apos;; 90:hi=&apos;90+&apos;; else=NA&quot;)

#
# Age BY sex (pyramid plot)
#
plotFileName &lt;- paste(FILENAME, &quot;.AgeBySex.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 12)
par(pty = &quot;m&quot;); par(mar = c(5, 4, 2, 2) + 0.1)
pyramid.plot(ageGroup, sexText, main = &quot;&quot;, xlab = &quot;Sex (Females | Males)&quot;, ylab = &quot;Age group (years)&quot;)
dev.off()
rm(plotFileName)

#
# Distribution of MUAC (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.MUAC.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
hist(indicators.ALL$MUAC, breaks = 20, xlim = c(160, max(indicators.ALL$MUAC, na.rm = TRUE)), main = &quot;&quot;, xlab = &quot;MUAC (mm)&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$MUAC ~ sexText,  main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;MUAC&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of meal frequency (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.MF.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$MF, values = 0:max(indicators.ALL$MF, na.rm = TRUE)), main = &quot;&quot;, xlab = &quot;Meal frequency&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$MF ~ sexText,  main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Meal frequency&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of DDS (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.DDS.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$DDS, values = 0:max(indicators.ALL$DDS)), main = &quot;&quot;, xlab = &quot;Dietary diversity score&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$DDS ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Dietary diversity score&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of K6 (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.K6.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
hist(indicators.ALL$K6, main = &quot;&quot;, xlab = &quot;K6&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$K6 ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;K6&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Distribution of ADL (overall and by sex)
#
plotFileName &lt;- paste(FILENAME, &quot;.ADL.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 3.5, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(1, 2)); par(pty = &quot;m&quot;); par(cex.axis = 0.8); par(mar = c(5, 4, 2, 2) + 0.1)
barplot(fullTable(x = indicators.ALL$scoreADL, values = 0:6), main = &quot;&quot;,  xlab = &quot;Katz ADL Score&quot;, ylab = &quot;Frequency&quot;, col = &quot;lightgray&quot;)
boxplot(indicators.ALL$scoreADL ~ sexText, main = &quot;&quot;, xlab = &quot;Sex&quot;, ylab = &quot;Katz ADL Score&quot;, frame.plot = FALSE)
dev.off()
rm(plotFileName)

#
# Sources of income (by sex)
#
tabM &lt;- NULL
tabM &lt;- c(tabM, table(indicators.MALES$M2A)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2B)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2C)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2D)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2E)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2F)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2G)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2H)[&quot;1&quot;])
tabM &lt;- c(tabM, table(indicators.MALES$M2I)[&quot;1&quot;])
tabM[is.na(tabM)] &lt;- 0
tabF &lt;- NULL
tabF &lt;- c(tabF, table(indicators.FEMALES$M2A)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2B)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2C)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2D)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2E)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2F)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2G)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2H)[&quot;1&quot;])
tabF &lt;- c(tabF, table(indicators.FEMALES$M2I)[&quot;1&quot;])
tabF[is.na(tabF)] &lt;- 0
#
# Merge data for males (tabM) and females (tabF)
#
tab &lt;- data.frame(tabM, tabF)
names(tab) &lt;- c(&quot;M&quot;, &quot;F&quot;)
tab$SUM &lt;- tab$M + tab$F
#
# Label rows with income source
#
rownames(tab) &lt;- c(&quot;Agriculture / fishing / livestock&quot;,
                   &quot;Wage / salary&quot;,
                   &quot;Sales of charcoal / bricks / &amp;c.&quot;,
                   &quot;Trading (e.g. market or shop)&quot;,
                   &quot;Investments&quot;,
                   &quot;Spending savings / sales of assets&quot;,
                   &quot;Charity&quot;,
                   &quot;Cash transfer / social security&quot;,
                   &quot;Other source(s) of income&quot;)
#
# Sort by frequency of income source (descending)
#
tab &lt;- tab[rev(order(tab$SUM)), ]
#
# Convert data.frame to a table for plotting using the &apos;barplot()&apos; function
#
tab &lt;- as.table(as.matrix(tab[ ,1:2]))
#
# Plot income sources by sex
#
plotFileName &lt;- paste(FILENAME, &quot;.Incomes.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
par(pty = &quot;m&quot;); par(las = 1); par(cex.axis = 0.8); par(mar = c(3, 12, 2, 2) + 0.1)
barplot(t(tab), col = c(&quot;lightgray&quot;, &quot;white&quot;), horiz = TRUE, main = &quot;&quot;, xlab = &quot;Frequency (males are shaded)&quot;, ylab = &quot;&quot;)
dev.off()
rm(plotFileName, tab, tabF, tabM)

#
# WASH
#
plotFileName &lt;- paste(FILENAME, &quot;.WASH.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
par(mfrow = c(2, 2))
par(cex.axis = 0.8)
tab &lt;- table(indicators.ALL$W1)
names(tab) &lt;- c(&quot;Not improved&quot;, &quot;Improved&quot;)
barplot(tab, main = &quot;Source of drinking water&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W2)
names(tab) &lt;- c(&quot;Unsafe&quot;, &quot;Safe&quot;)
barplot(tab, main = &quot;Safe drinking water&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W3)
names(tab) &lt;- c(&quot;Not improved&quot;, &quot;Improved&quot;)
barplot(tab, main = &quot;Improved sanitation facility&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
tab &lt;- table(indicators.ALL$W4)
names(tab) &lt;- c(&quot;Not improved\nor shared&quot;, &quot;Improved and\nnot shared&quot;)
barplot(tab, main = &quot;Improved and non-shared\nsanitation facility&quot;, col = c(&quot;red&quot;, &quot;green&quot;), ylab = &quot;Frequency&quot;)
dev.off()
rm(plotFileName, tab)

#
# Dementia screen (CSID)
#
plotFileName &lt;- paste(FILENAME, &quot;.dementia.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
tab &lt;- table(indicators.ALL$DS)
names(tab) &lt;- c(&quot;Normal&quot;, &quot;Probable dementia&quot;)
barplot(tab, main = &quot;&quot;, col = c(&quot;green&quot;, &quot;red&quot;), ylab = &quot;Frequency&quot;)
dev.off()
rm(plotFileName, tab)

#
# Disability (Washington Group)
#
plotFileName &lt;- paste(FILENAME, &quot;.disability.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
P0 &lt;- table(indicators.ALL$wgP0)[&quot;1&quot;]
P1 &lt;- table(indicators.ALL$wgP1)[&quot;1&quot;]
P2 &lt;- table(indicators.ALL$wgP2)[&quot;1&quot;]
P3 &lt;- table(indicators.ALL$wgP3)[&quot;1&quot;]
PM &lt;- table(indicators.ALL$wgPM)[&quot;1&quot;]
tab &lt;- as.table(c(P0, P1, P2, P3, PM))
names(tab) &lt;- c(&quot;\nP0 : None &quot;, &quot;\nP1 : Any&quot;, &quot;P2 : Moderate\nor severe&quot;, &quot;\nP3 : Severe&quot;, &quot;\nPM : Multiple&quot;)
barplot(tab, main = &quot;&quot;, col = &quot;lightgray&quot;, ylab = &quot;Frequency&quot;, cex.names = 0.8)
dev.off()
rm(plotFileName, P0, P1, P2, P3, PM, tab)

#
# Hunger (HHS)
#
plotFileName &lt;- paste(FILENAME, &quot;.HHS.png&quot;, sep = &quot;&quot;)
png(filename = plotFileName, width = 6, height = 6, units = &quot;in&quot;, res = 600, pointsize = 10)
H0 &lt;- table(indicators.ALL$wgP0)[&quot;1&quot;]
H1 &lt;- table(indicators.ALL$wgP1)[&quot;1&quot;]
H2 &lt;- table(indicators.ALL$wgP2)[&quot;1&quot;]
tab &lt;- as.table(c(H0, H1, H2))
names(tab) &lt;- c(&quot;Little or none&quot;, &quot;Moderate&quot;, &quot;Severe&quot;)
barplot(tab, main = &quot;&quot;, col = c(&quot;green&quot;, &quot;orange&quot;, &quot;red&quot;), ylab = &quot;Frequency&quot;, cex.names = 0.8)
dev.off()
rm(plotFileName, H0, H1, H2, tab)

#
# Clean-up
#
rm(sexText, ageGroup)
gc()

</command>
							<property title="Charts" shape="CHART"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="9" date="1420042383233" uid="c32780c74fc8ff" x="30" y="10">
							<command>################################################################################
#
#  Identifiers and survey administration data
#
#    psu    Cluster (PSU) identifier
#
psu &lt;- svy$psu


###############################################################################
#
#  Demography and situation indicators
#
#  Indicators are :
#
#    resp1     Respondent is SUBJECT
#    resp2     Respondent is FAMILY CARER
#    resp3     Respondent is OTHER CARER
#    resp4     Respondent is OTHER
#    age       Age of respondent (years)
#    ageGrp1   Age of respondent is between 50 and 59 years
#    ageGrp2   Age of respondent is between 60 and 69 years
#    ageGrp3   Age of respondent is between 70 and 79 years
#    ageGrp4   Age of respondent is between 80 and 89 years
#    ageGrp5   Age of respondent is 90 years or older
#    sex1      Sex = MALE
#    sex2      Sex = FEMALE
#    marital1  Marital status = SINGLE
#    marital2  Marital status = MARRIED
#    marital3  Marital status = LIVING TOGETHER
#    marital4  Marital status = DIVORCED
#    marital5  Marital status = WIDOWED
#    marital6  Marital status = OTHER
#    alone     Respondent lives alone
#
resp1    &lt;- recode(svy$d1, &quot;1=1; 5:9=1; NA=1; else=0&quot;)
resp2    &lt;- recode(svy$d1, &quot;2=1; else=0&quot;)
resp3    &lt;- recode(svy$d1, &quot;3=1; else=0&quot;)
resp4    &lt;- recode(svy$d1, &quot;4=1; else=0&quot;)
age      &lt;- recode(svy$d2, &quot;888=NA; 999=NA&quot;)
ageGrp1  &lt;- recode(age,&quot;50:59=1; NA=NA; else=0&quot;)
ageGrp2  &lt;- recode(age,&quot;60:69=1; NA=NA; else=0&quot;)
ageGrp3  &lt;- recode(age,&quot;70:79=1; NA=NA; else=0&quot;)
ageGrp4  &lt;- recode(age,&quot;80:89=1; NA=NA; else=0&quot;)
ageGrp5  &lt;- recode(age,&quot;90:hi=1; NA=NA; else=0&quot;)
sex1     &lt;- recode(svy$d3, &quot;1=1; 2=0; else=NA&quot;)
sex2     &lt;- recode(svy$d3, &quot;1=0; 2=1; else=NA&quot;)
marital1 &lt;- recode(svy$d4, &quot;1=1; else=0&quot;)
marital2 &lt;- recode(svy$d4, &quot;2=1; else=0&quot;)
marital3 &lt;- recode(svy$d4, &quot;3=1; else=0&quot;)
marital4 &lt;- recode(svy$d4, &quot;4=1; else=0&quot;)
marital5 &lt;- recode(svy$d4, &quot;5=1; else=0&quot;)
marital6 &lt;- recode(svy$d4, &quot;6=1; else=0&quot;)
alone    &lt;- recode(svy$d5, &quot;1=1; else=0&quot;)

################################################################################
#
#  Dietary intake indicators
#
#  Indicators are :
#
#    MF           Meal frequency
#    DDS          DDS (count of 11 groups)
#    FG01         Cereals
#    FG02         Roots and tubers
#    FG03         Fruits and vegetables
#    FG04         All meat
#    FG05         Eggs
#    FG06         Fish
#    FG07         Legumes, nuts, and seeds
#    FG08         Milk and milk products
#    FG09         Fats
#    FG10         Sugar
#    FG11         Other
#    aProtein	   Protein rich animal sources of protein
#    pProtein	   Protein rich plant sources of protein
#    proteinRich  Protein rich foods
#    pVitA        Plant sources of vitamin A
#    aVitA        Animal sources of vitamin A
#    xVitA        Any source of vitamin A
#    ironRich     Iron rich foods
#    caRich       Calcium rich foods
#    znRich       Zinc rich foods
#    vitB1        Vitamin B1-rich foods
#    vitB2        Vitamin B2-rich foods
#    vitB3        Vitamin B3-rich foods
#    vitB6        Vitamin B6-rich foods
#    vitB12       Vitamin B12-rich foods
#    vitBcomplex  Vitamin B1/B2/B3/B6/B12-rich foods
#
#  The basic approach used is described in:
#
#    Kennedy G, Ballard T, Dop M C (2011). Guidelines for Measuring Household
#    and Individual Dietary Diversity. Rome, FAO
#
#  and extended to include indicators of probable adequate intake of a number of
#  nutrients / micronutrients.
#

################################################################################
#
#  Meal frequency
#
MF &lt;- recode(svy$f1, &quot;9=0; NA=0&quot;)

################################################################################
#
#  Recode dietary diversity data
#
svy$f2a &lt;- recode(svy$f2a, &quot;1=1; else=0&quot;)
svy$f2b &lt;- recode(svy$f2b, &quot;1=1; else=0&quot;)
svy$f2c &lt;- recode(svy$f2c, &quot;1=1; else=0&quot;)
svy$f2d &lt;- recode(svy$f2d, &quot;1=1; else=0&quot;)
svy$f2e &lt;- recode(svy$f2e, &quot;1=1; else=0&quot;)
svy$f2f &lt;- recode(svy$f2f, &quot;1=1; else=0&quot;)
svy$f2g &lt;- recode(svy$f2g, &quot;1=1; else=0&quot;)
svy$f2h &lt;- recode(svy$f2h, &quot;1=1; else=0&quot;)
svy$f2i &lt;- recode(svy$f2i, &quot;1=1; else=0&quot;)
svy$f2j &lt;- recode(svy$f2j, &quot;1=1; else=0&quot;)
svy$f2k &lt;- recode(svy$f2k, &quot;1=1; else=0&quot;)
svy$f2l &lt;- recode(svy$f2l, &quot;1=1; else=0&quot;)
svy$f2m &lt;- recode(svy$f2m, &quot;1=1; else=0&quot;)
svy$f2n &lt;- recode(svy$f2n, &quot;1=1; else=0&quot;)
svy$f2o &lt;- recode(svy$f2o, &quot;1=1; else=0&quot;)
svy$f2p &lt;- recode(svy$f2p, &quot;1=1; else=0&quot;)
svy$f2q &lt;- recode(svy$f2q, &quot;1=1; else=0&quot;)
svy$f2r &lt;- recode(svy$f2r, &quot;1=1; else=0&quot;)
svy$f2s &lt;- recode(svy$f2s, &quot;1=1; else=0&quot;)

################################################################################
#
#  Dietary diversity
#
#    Recode to ELEVEN standard food groups :
#    
#      Var    Food group                               From ...
#      ----   ---------------------------------------  ---------------
#      FG01   Cereals                                  (f2c)
#      FG02   Roots and tubers                         (f2g)
#      FG03   Fruits and vegetables                    (f2d, f2f, f2i)
#      FG04   All meat                                 (f2j, f2k, f2q)
#      FG05   Eggs                                     (f2n)
#      FG06   Fish                                     (f2l)
#      FG07   Legumes, nuts, and seeds                 (f2h)
#      FG08   Milk and milk products                   (f2a, f2m)
#      FG09   Fats                                     (f2e, f2o)
#      FG10   Sugar                                    (f2r)
#      FG11   Other                                    (f2b, f2p, f2s)
#      ----   ---------------------------------------  ---------------
#
#    and sum into &apos;DDS&apos; ...
#
FG01 &lt;- svy$f2c
FG02 &lt;- svy$f2g
FG03 &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2i == 1, 1, 0)
FG04 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q == 1, 1, 0)
FG05 &lt;- svy$f2n
FG06 &lt;- svy$f2l
FG07 &lt;- svy$f2h
FG08 &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)
FG09 &lt;- ifelse(svy$f2e == 1 | svy$f2o == 1, 1, 0)
FG10 &lt;- svy$f2r
FG11 &lt;- ifelse(svy$f2b == 1 | svy$f2p == 1 | svy$f2s == 1, 1, 0)
#
# Sum food groups to &apos;DDS&apos;
#
DDS &lt;- FG01 + FG02 + FG03 + FG04 + FG05 + FG06 + FG07 + FG08 + FG09 + FG10 + FG11

################################################################################
#
#  Protein rich foods in diet from aminal, plant, and all sources
#
aProtein &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q ==1 | svy$f2n == 1 | svy$f2a == 1 | svy$f2m == 1, 1, 0)
pProtein &lt;- ifelse(svy$f2h == 1 | svy$f2p == 1, 1, 0)
proteinRich &lt;- ifelse(aProtein == 1 | pProtein == 1, 1, 0)

################################################################################
#
#  Micronutrient intake (vitamin A, iron, calcium, zinc)
#
#    pVitA     Respondent consumes plant sources of vitamin A
#    aVitA     Respondent consumes animal sources of vitamin A
#    xVitA     Respondent consumes any source of vitamin A
#    ironRich  Respondent consumes iron rich foods
#    caRich    Respondent consumes calcium rich foods
#    znRich    Respondent consumes zinc rich foods
#
pVitA    &lt;- ifelse(svy$f2d == 1 | svy$f2e == 1 | svy$f2f == 1, 1, 0)
aVitA    &lt;- ifelse(svy$f2a == 1 | svy$f2j == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
xVitA    &lt;- ifelse(pVitA == 1 | aVitA == 1, 1, 0)
ironRich &lt;- ifelse(svy$f2f == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
caRich   &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)       
znRich   &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2p == 1 | svy$f2q == 1, 1, 0)

#################################################################################
#
#  Micronutrient intake (B vitamins)
#
#	vitB1        Respondent consumes vitamin B1-rich foods
#	vitB2        Respondent consumes vitamin B2-rich foods
#	vitB3        Respondent consumes vitamin B3-rich foods
#	vitB6        Respondent consumes vitamin B6-rich foods
#	vitB12       Respondent consumes vitamin B12-rich foods
#	vitBcomplex  Respondent consumes vitamin B1/B2/B3/B6/B12-rich foods
#
vitB1  &lt;- ifelse(svy$f2a == 1 | svy$f2e == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1 | svy$f2p == 1, 1, 0)
vitB2  &lt;- ifelse(svy$f2a == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1, 1, 0)
vitB3  &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB6  &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2i == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB12 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
vitBsources &lt;- vitB1 + vitB2 + vitB3 + vitB6 + vitB12
vitBcomplex &lt;- ifelse(vitBsources == 5, 1, 0)

################################################################################
#
# Clean-up
#
rm(vitBsources)

################################################################################
#
#  Household Hunger Scale (HHS)
#
#  Indicators are :
#
#    HHS1  Little or no hunger in household 
#    HHS2  Moderate hunger in household 
#    HHS3  Severe hunger in household
#
#  The HHS is described in :
#
#    Ballard T, Coates J, Swindale A, Deitchler M (2011). Household Hunger
#    Scale: Indicator Definition and Measurement Guide. Washington DC,
#    FANTA-2 Bridge, FHI 360
#

################################################################################
#
#  Recode component variables
#
svy$f3 &lt;- recode(svy$f3, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f4 &lt;- recode(svy$f4, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f5 &lt;- recode(svy$f5, &quot;1=1; 2=1; 3=2; else=0&quot;)

################################################################################
#
#  Sum components and classify hunger into three separate indicator variables
#
sumHHS &lt;- svy$f3 + svy$f4 + svy$f5
HHS1 &lt;- recode(sumHHS, &quot;0:1=1; else=0&quot;)
HHS2 &lt;- recode(sumHHS, &quot;2:3=1; else=0&quot;)
HHS3 &lt;- recode(sumHHS, &quot;4:6=1; else=0&quot;)

###############################################################################
#
#  Clean-up
#
rm(sumHHS)

################################################################################
#
#  Katz &quot;Index of Independence in Activities of Daily Living&quot; (ADL) score
#
#  Indicators are :
#
#    ADL01      Bathing
#    ADL02      Dressing
#    ADL03      Toileting
#    ADL04      Transferring (mobility)
#    ADL05      Continence
#    ADL06      Feeding
#    scoreADL   ADL score
#    classADL1  Severity of dependence = INDEPENDENT
#    classADL2  Severity of dependence = PARTIAL DEPENDENCY
#    classADL3  Severity of dependence = SEVERE DEPENDENCY
#    hasHelp    Has someone to help with ADL
#    unmetNeed  Unmet need (dependency with NO helper)
#
#
#    The Katz ADL score is described in :
#
#      Katz S, Ford AB, Moskowitz RW, Jackson BA, Jaffe MW (1963). Studies
#      of illness in the aged. The Index of ADL: a standardized measure of
#      biological and psychosocial function. JAMA, 1963, 185(12):914-9
#
#      Katz S, Down TD, Cash HR, Grotz, RC (1970). Progress in the development
#      of the index of ADL. The Gerontologist, 10(1), 20-30
#
#      Katz S (1983). Assessing self-maintenance: Activities of daily living,
#      mobility and instrumental activities of daily living. JAGS, 31(12),
#      721-726
#

################################################################################
#
#  Recode ADL (activities of daily living) score data
#
#  Each item is scored :
#
#    1 = Independence
#    0 = Needs assistance or supervision
#
ADL01 &lt;- recode(svy$a1, &quot;2=1; else=0&quot;)    # Bathing
ADL02 &lt;- recode(svy$a2, &quot;2=1; else=0&quot;)    # Dressing
ADL03 &lt;- recode(svy$a3, &quot;2=1; else=0&quot;)    # Toileting
ADL04 &lt;- recode(svy$a4, &quot;2=1; else=0&quot;)    # Transferring (mobility)
ADL05 &lt;- recode(svy$a5, &quot;2=1; else=0&quot;)    # Continence
ADL06 &lt;- recode(svy$a6, &quot;2=1; else=0&quot;)    # Feeding

################################################################################
#
#  Create ADL score (items summed over all six activities / dimensions)
#
scoreADL &lt;- ADL01 + ADL02 + ADL03 + ADL04 + ADL05 + ADL06

################################################################################
#
#  Severity of dependence (from Katz ADL score)
#
#    Indicator    Degree of severity    Related Scores
#    ---------    ------------------    ----------------
#    classADL1    Independent           scoreADL = 5,6
#    classADL2    Partial dependency    scoreADL = 3,4
#    classADL3    Severe dependency     scoreADL = 0,1,2
#    ---------    ------------------    ----------------
#
classADL1 &lt;- recode(scoreADL, &quot;5:6=1; else=0&quot;)
classADL2 &lt;- recode(scoreADL, &quot;3:4=1; else=0&quot;)
classADL3 &lt;- recode(scoreADL, &quot;0:2=1; else=0&quot;)

################################################################################
#
#  Does the subject have someone to help with everyday activities?
#
hasHelp &lt;- recode(svy$a7, &quot;1=1; else=0&quot;)

################################################################################
#
#  Does the subject need help but has no helper?
#
#  Note : Denominator is entire sample so the indicator is the proportion of
#         the population with unmet ADl help needs
#
unmetNeed &lt;- ifelse(scoreADL &lt; 6 &amp; hasHelp == 0, 1, 0)

################################################################################
#
#  K6 : Short form psychological distress score
#
#  Indicators are :
#
#    K6      K6 score
#    K6Case  K6 score &gt; 12  (in serious psychological distress)
#
#  The K6 score is described in :
#
#    Kessler RC, Andrews G, Colpe LJ, Hiripi E, Mroczek, DK, Normand SLT,
#    et al. (2002). Short screening scales to monitor population prevalences
#    and trends in non-specific psychological distress. Psychological
#    Medicine, 32(6), 959–976
#

################################################################################
#
#  Recode DON&apos;T KNOW, REFUSED, NA and MISSING values to 5 (NONE)
#
svy$k6a &lt;- recode(svy$k6a, &quot;6:9=5&quot;)
svy$k6b &lt;- recode(svy$k6b, &quot;6:9=5&quot;)
svy$k6c &lt;- recode(svy$k6c, &quot;6:9=5&quot;)
svy$k6d &lt;- recode(svy$k6d, &quot;6:9=5&quot;)
svy$k6e &lt;- recode(svy$k6e, &quot;6:9=5&quot;)
svy$k6f &lt;- recode(svy$k6f, &quot;6:9=5&quot;)

################################################################################
#
#  Reverse coding &amp; create K6 score (i.e. as the sum of individual item scores)
#
svy$k6a &lt;- 5 - svy$k6a
svy$k6b &lt;- 5 - svy$k6b
svy$k6c &lt;- 5 - svy$k6d
svy$k6d &lt;- 5 - svy$k6d
svy$k6e &lt;- 5 - svy$k6e
svy$k6f &lt;- 5 - svy$k6f
K6 &lt;- svy$k6a + svy$k6b + svy$k6c + svy$k6d + svy$k6e + svy$k6f

################################################################################
#
#  Apply case-definition for serious psychological distress(i.e. K6 &gt; 12)
#
K6Case &lt;- recode(K6, &quot;0:12=0; 13:hi=1&quot;)

################################################################################
#
#  Brief Community Screening Instrument for Dementia (CSID)
#
#  Indicators are :
#
#    DS  Probable dementia by CSID screen
#
#  The CSID dementia screening tool is described in :
#
#      Prince M, et al. (2010). A brief dementia screener suitable for use
#      by non-specialists in resource poor settings - The cross-cultural
#      derivation and validation of the brief Community Screening Instrument
#      for Dementia. International Journal of Geriatric Psychiatry, 26(9),
#      899–907
#

################################################################################
#
#  Recode scored components to 0 / 1 (with 1 = correct)
#
svy$ds1  &lt;- recode(svy$ds1,  &quot;1=1; else=0&quot;) # Nose
svy$ds2  &lt;- recode(svy$ds2,  &quot;1=1; else=0&quot;) # Hammer
svy$ds3  &lt;- recode(svy$ds3,  &quot;1=1; else=0&quot;) # Day of week
svy$ds4  &lt;- recode(svy$ds4,  &quot;1=1; else=0&quot;) # Season
svy$ds5  &lt;- recode(svy$ds5,  &quot;1=1; else=0&quot;) # Point to window then door
svy$ds6a &lt;- recode(svy$ds6a, &quot;1=1; else=0&quot;) # Memory &quot;CHILD&quot;
svy$ds6b &lt;- recode(svy$ds6b, &quot;1=1; else=0&quot;) # Memory &quot;HOUSE&quot;
svy$ds6c &lt;- recode(svy$ds6c, &quot;1=1; else=0&quot;) # Memory &quot;ROAD&quot;

################################################################################
#
#  Sum correct items into CSID score
#
scoreCSID &lt;- svy$ds1 + svy$ds2 + svy$ds3 + svy$ds4 + svy$ds5 + svy$ds6a + svy$ds6b + svy$ds6c

#################################################################################
#
#  Classify dementia : 
#
#    0 = Normal (not probable dementia)
#    1 = Probable dementia
#
DS &lt;- recode(scoreCSID, &quot;0:4=1; 5:8=0&quot;)

################################################################################
#
#  Clean-up
#
rm(scoreCSID)

################################################################################
#
#  Health and health-seeking indicators
#
#  Indicators are : 
#
#    H1   Chronic condition
#
#    H2   Takes drugs regularly for chronic condition
#
#    H3x  Main reason for not taking drugs for chronic condition where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#
#    H4   Recent disease episode
#
#    H5   Accessed care for recent disease episode
#
#    H6x  Main reason for not accessing care for recent disease episode where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#

################################################################################
#
#  Health indicators : CHRONIC CONDITIONS
#
svy$h1 &lt;- recode(svy$h1, &quot;1=1; else=2&quot;)
H1 &lt;- recode(svy$h1, &quot;1=1; else=0&quot;)
H2 &lt;- ifelse(H1 == 0, NA, recode(svy$h2, &quot;1=1; else=0&quot;))
H3 &lt;- ifelse(H2 == 1, NA, recode(svy$h3, &quot;NA=9&quot;))
#
# Indicators for main reason for NOT taking drugs for chronic condition
#
H31 &lt;- recode(H3, &quot;1=1; NA=NA; else=0&quot;)
H32 &lt;- recode(H3, &quot;2=1; NA=NA; else=0&quot;)
H33 &lt;- recode(H3, &quot;3=1; NA=NA; else=0&quot;)
H34 &lt;- recode(H3, &quot;4=1; NA=NA; else=0&quot;)
H35 &lt;- recode(H3, &quot;5=1; NA=NA; else=0&quot;)
H36 &lt;- recode(H3, &quot;6=1; NA=NA; else=0&quot;)
H37 &lt;- recode(H3, &quot;7=1; NA=NA; else=0&quot;)
H38 &lt;- recode(H3, &quot;8=1; NA=NA; else=0&quot;)
H39 &lt;- recode(H3, &quot;9=1; NA=NA; else=0&quot;)

################################################################################
#
#  Health indicators : RECENT DISEASE EPISODE
#
svy$h4 &lt;- recode(svy$h4, &quot;1=1; else=2&quot;)
H4 &lt;- recode(svy$h4, &quot;1=1; else=0&quot;)
H5 &lt;- ifelse(H4 == 0, NA, recode(svy$h5, &quot;1=1; else=0&quot;))
H6 &lt;- ifelse(H5 == 1, NA, recode(svy$h6, &quot;NA=9&quot;))
#
#
# Indicators for main reason for NOT accessing care for recent disease episode
#
H61 &lt;- recode(H6, &quot;1=1; NA=NA; else=0&quot;)
H62 &lt;- recode(H6, &quot;2=1; NA=NA; else=0&quot;)
H63 &lt;- recode(H6, &quot;3=1; NA=NA; else=0&quot;)
H64 &lt;- recode(H6, &quot;4=1; NA=NA; else=0&quot;)
H65 &lt;- recode(H6, &quot;5=1; NA=NA; else=0&quot;)
H66 &lt;- recode(H6, &quot;6=1; NA=NA; else=0&quot;)
H67 &lt;- recode(H6, &quot;7=1; NA=NA; else=0&quot;)
H68 &lt;- recode(H6, &quot;8=1; NA=NA; else=0&quot;)
H69 &lt;- recode(H6, &quot;9=1; NA=NA; else=0&quot;)

#
# Clean-up
#
rm(H3, H6)

###############################################################################
#
#  Income and income sources
#
#  Indicators are :
#
#    M1   Has a personal income
#    M2A  Agriculture / fishing / livestock
#    M2B  Wages / salary
#    M2C  Sale of charcoal / bricks / &amp;c.
#    M2D  Trading (e.g. market or shop)
#    M2E  Investments
#    M2F  Spending savings / sale of assets
#    M2G  Charity
#    M2H  Cash transfer / Social security
#    M2I  Other
#

################################################################################
#
#  Create binary indicators
#
M1  &lt;- recode(svy$m1,  &quot;1=1; else=0&quot;) # Has a personal income
M2A &lt;- recode(svy$m2a, &quot;1=1; else=0&quot;) # Agriculture / fishing / livestock
M2B &lt;- recode(svy$m2b, &quot;1=1; else=0&quot;) # Wages / salary
M2C &lt;- recode(svy$m2c, &quot;1=1; else=0&quot;) # Sale of charcoal / bricks / &amp;c.
M2D &lt;- recode(svy$m2d, &quot;1=1; else=0&quot;) # Trading (e.g. market or shop)
M2E &lt;- recode(svy$m2e, &quot;1=1; else=0&quot;) # Investments
M2F &lt;- recode(svy$m2f, &quot;1=1; else=0&quot;) # Spending savings / sale of assets
M2G &lt;- recode(svy$m2g, &quot;1=1; else=0&quot;) # Charity
M2H &lt;- recode(svy$m2h, &quot;1=1; else=0&quot;) # Cash transfer / social security
M2I &lt;- recode(svy$m2i, &quot;1=1; else=0&quot;) # Other

################################################################################
#
#  Check for any income (return &apos;correct&apos; result in M1)
#
checkForIncome &lt;- M1 + M2A + M2B + M2C + M2D + M2E + M2F + M2G + M2H + M2I
M1 &lt;- ifelse(checkForIncome &gt; 0, 1, 0)

################################################################################
#
# Clean-up
#
rm(checkForIncome)

################################################################################
#
#  Water, Sanitation, and Hygiene (WASH) indicators
#
#  Indicators are :
#
#      W1  Improved source of drinking water
#      W2  Safe drinking water (improved source OR adequate treatment)
#      W3  Improved sanitation facility
#      W4  Improved non-shared sanitation facility
#
#  These are a (core) subset of indicators from :
#
#     WHO / UNICEF (2006). Core Questions on Drinking-water and Sanitation
#     for Household Surveys. Geneva, WHO / UNICEF
#

################################################################################
#
#  Recode WASH data
#
svy$w1 &lt;- recode(svy$w1, &quot;1=1; else=0&quot;)
svy$w2 &lt;- recode(svy$w2, &quot;1=1; else=0&quot;)
svy$w3 &lt;- recode(svy$w3, &quot;1=1; else=0&quot;)
svy$w4 &lt;- recode(svy$w4, &quot;1=1; else=0&quot;)

################################################################################
#
#  Create WASH indicators
#
W1 &lt;- svy$w1
W2 &lt;- ifelse(svy$w1 == 1 | svy$w2 == 1, 1, 0)
W3 &lt;- svy$w3
W4 &lt;- ifelse(svy$w3 == 1 &amp; svy$w4 != 1, 1, 0)

################################################################################
#
#  Anthropometry and screening
#
#  Indicators are :
#
#    MUAC      MUAC
#    oedema    Bilateral pitting oedema (may not be nutritional)
#    screened  Either MUAC or oedema checked previously
#

################################################################################
#
#  Censor REFUSAL, NOT APPLICABLE, and MISSING values codes in MUAC and Oedema
#
MUAC &lt;- recode(svy$as1, &quot;777=NA; 888=NA; 999=NA&quot;)
oedema &lt;- recode(svy$as3, &quot;1=1; else=0&quot;)

################################################################################
#
#  Screening for GAM, MAM, SAM (i.e. either MUAC or oedema checked previously)
#
screened &lt;- ifelse(svy$as2 == 1 | svy$as4 == 1, 1, 0)

################################################################################
#
#  Visual impairment by &quot;Tumbling E&quot; method
#
#  Indicators are :
#
#    poorVA  Poor visual acuity (correct in &lt; 3 of 4 tests)
#
#  Refusal and blindness are treated as test failures
#
#  The &quot;Tumbling E&quot; method is described in :
#
#    Taylor HR (1978). Applying new design principles to the construction of an
#    illiterate E Chart. Am J Optom &amp; Physiol Optics 55:348
#

################################################################################
#
#  Create binary indicators
#
svy$va2a &lt;- recode(svy$va2a, &quot;1=1; else=0&quot;)
svy$va2b &lt;- recode(svy$va2b, &quot;1=1; else=0&quot;)
svy$va2c &lt;- recode(svy$va2c, &quot;1=1; else=0&quot;)
svy$va2d &lt;- recode(svy$va2d, &quot;1=1; else=0&quot;)
sumVA &lt;- svy$va2a + svy$va2b + svy$va2c + svy$va2d
poorVA &lt;-  ifelse(sumVA &lt; 3, 1, 0)

###############################################################################
#
#  Clean-up
#
rm(sumVA)

################################################################################
#
#  Miscellaneous indicators
#
#  Indicators are : 
#
#    chew  Problems chewing food
#    food  Anyone in HH receives a ration
#    NFRI  Anyone in HH received non-food relief item(s) in previous month
#
chew &lt;- recode(svy$a8, &quot;1=1; else=0&quot;)
food &lt;- recode(svy$f6, &quot;1=1; else=0&quot;)
NFRI &lt;- recode(svy$f7, &quot;1=1; else=0&quot;)



################################################################################
#
#  Washington Group (WG) short set of question designed to identify people with a
#  disability in a census or survey format.
#
#  See:
#
#    http://www.washingtongroup-disability.com
#
#    https://www.cdc.gov/nchs/washington_group/wg_documents.htm
#
#  for details.
#

################################################################################
#
# Missing values
#
svy$wg1 &lt;- recode(svy$wg1, &quot;9=0; NA=0&quot;)
svy$wg2 &lt;- recode(svy$wg2, &quot;9=0; NA=0&quot;)
svy$wg3 &lt;- recode(svy$wg3, &quot;9=0; NA=0&quot;)
svy$wg4 &lt;- recode(svy$wg4, &quot;9=0; NA=0&quot;)
svy$wg5 &lt;- recode(svy$wg5, &quot;9=0; NA=0&quot;)
svy$wg6 &lt;- recode(svy$wg6, &quot;9=0; NA=0&quot;)

################################################################################
#
# Vision domain
#
wgVisionD0 &lt;- ifelse(svy$wg1 == 0, 1, 0)
wgVisionD1 &lt;- ifelse(svy$wg1 == 1 | svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD2 &lt;- ifelse(svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD3 &lt;- ifelse(svy$wg1 == 3, 1, 0)

################################################################################
#
# Hearing domain
#
wgHearingD0 &lt;- ifelse(svy$wg2 == 0, 1, 0)
wgHearingD1 &lt;- ifelse(svy$wg2 == 1 | svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD2 &lt;- ifelse(svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD3 &lt;- ifelse(svy$wg2 == 3, 1, 0)

################################################################################
#
# Mobility domain
#
wgMobilityD0 &lt;- ifelse(svy$wg3 == 0, 1, 0)
wgMobilityD1 &lt;- ifelse(svy$wg3 == 1 | svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD2 &lt;- ifelse(svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD3 &lt;- ifelse(svy$wg3 == 3, 1, 0)


################################################################################
#
# Remembering domain
#
wgRememberingD0 &lt;- ifelse(svy$wg4 == 0, 1, 0)
wgRememberingD1 &lt;- ifelse(svy$wg4 == 1 | svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD2 &lt;- ifelse(svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD3 &lt;- ifelse(svy$wg4 == 3, 1, 0)

################################################################################
#
# Self-care domain
#
wgSelfCareD0 &lt;- ifelse(svy$wg5 == 0, 1, 0)
wgSelfCareD1 &lt;- ifelse(svy$wg5 == 1 | svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD2 &lt;- ifelse(svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD3 &lt;- ifelse(svy$wg5 == 3, 1, 0)

################################################################################
#
# Communicating domain
#
wgCommunicatingD0 &lt;- ifelse(svy$wg6 == 0, 1, 0)
wgCommunicatingD1 &lt;- ifelse(svy$wg6 == 1 | svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD2 &lt;- ifelse(svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD3 &lt;- ifelse(svy$wg6 == 3, 1, 0)

################################################################################
#
# Overall prevalence
#
wgP0 &lt;- ifelse(wgVisionD0 + wgHearingD0 + wgMobilityD0 + wgRememberingD0 + wgSelfCareD0 + wgCommunicatingD0 == 6, 1, 0)
wgP1 &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  0, 1, 0)
wgP2 &lt;- ifelse(wgVisionD2 + wgHearingD2 + wgMobilityD2 + wgRememberingD2 + wgSelfCareD2 + wgCommunicatingD2 &gt;  0, 1, 0)
wgP3 &lt;- ifelse(wgVisionD3 + wgHearingD3 + wgMobilityD3 + wgRememberingD3 + wgSelfCareD3 + wgCommunicatingD3 &gt;  0, 1, 0)
wgPM &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  1, 1, 0)





################################################################################
#
#  Make summary data.frame for ALL respondents
#
indicators.ALL &lt;- data.frame(psu, resp1, resp2, resp3, resp4,
                            age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
                            marital1, marital2, marital3, marital4, marital5, marital6, 
                            alone,
                            MF, DDS,
                            FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
                            proteinRich, pProtein, aProtein,
                            pVitA, aVitA, xVitA,
                            ironRich,
                            caRich,
                            znRich,
                            vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
                            HHS1, HHS2, HHS3,
                            ADL01, ADL02, ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
                            K6, K6Case,
                            DS,
                            H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
                            H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
                            M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
                            W1, W2, W3, W4,
                            MUAC, oedema, screened,
                            poorVA,
                            chew, food, NFRI,
                            wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
                            wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
                            wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
                            wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
                            wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
                            wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
					   wgP0, wgP1, wgP2, wgP3, wgPM)

#
# Subset summary data.frames for MALES and FEMALES
#
indicators.MALES   &lt;- subset(indicators.ALL, sex1 == 1)
indicators.FEMALES &lt;- subset(indicators.ALL, sex2 == 1)

#
# Clean-up
#
rm(psu, resp1, resp2, resp3, resp4,
   age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
   marital1, marital2, marital3, marital4, marital5, marital6,
   alone,
   MF, DDS,
   FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
   proteinRich, pProtein, aProtein,
   pVitA, aVitA, xVitA,
   ironRich,
   caRich,
   znRich,
   vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
   HHS1, HHS2, HHS3,
   ADL01, ADL02,  ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
   K6, K6Case,
   DS,
   H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
   H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
   M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
   W1, W2, W3, W4,
   MUAC, oedema, screened,
   poorVA,
   chew, food, NFRI,
   wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
   wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
   wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
   wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
   wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
   wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
   wgP0, wgP1, wgP2, wgP3, wgPM)
gc()

#
# Restore &apos;svy&apos; from back-up copy (i.e. to undo recoding used when making indicators)
#
svy &lt;- svyBackup
</command>
							<property title="Indicators" shape="MODEL"/>
							<option type="com.ef_prime.rflow.node.base.SubflowNodeModel">
								<subflow>
									<graph version="0.8" width="1619" height="588" locationtype="a" offsetx="554" offsety="182">
										<node id="10" date="1419851633497" uid="ad7bbc040782d848" x="120" y="110">
											<command>################################################################################
#
#  Katz &quot;Index of Independence in Activities of Daily Living&quot; (ADL) score
#
#  Indicators are :
#
#    ADL01      Bathing
#    ADL02      Dressing
#    ADL03      Toileting
#    ADL04      Transferring (mobility)
#    ADL05      Continence
#    ADL06      Feeding
#    scoreADL   ADL score
#    classADL1  Severity of dependence = INDEPENDENT
#    classADL2  Severity of dependence = PARTIAL DEPENDENCY
#    classADL3  Severity of dependence = SEVERE DEPENDENCY
#    hasHelp    Has someone to help with ADL
#    unmetNeed  Unmet need (dependency with NO helper)
#
#
#    The Katz ADL score is described in :
#
#      Katz S, Ford AB, Moskowitz RW, Jackson BA, Jaffe MW (1963). Studies
#      of illness in the aged. The Index of ADL: a standardized measure of
#      biological and psychosocial function. JAMA, 1963, 185(12):914-9
#
#      Katz S, Down TD, Cash HR, Grotz, RC (1970). Progress in the development
#      of the index of ADL. The Gerontologist, 10(1), 20-30
#
#      Katz S (1983). Assessing self-maintenance: Activities of daily living,
#      mobility and instrumental activities of daily living. JAGS, 31(12),
#      721-726
#

################################################################################
#
#  Recode ADL (activities of daily living) score data
#
#  Each item is scored :
#
#    1 = Independence
#    0 = Needs assistance or supervision
#
ADL01 &lt;- recode(svy$a1, &quot;2=1; else=0&quot;)    # Bathing
ADL02 &lt;- recode(svy$a2, &quot;2=1; else=0&quot;)    # Dressing
ADL03 &lt;- recode(svy$a3, &quot;2=1; else=0&quot;)    # Toileting
ADL04 &lt;- recode(svy$a4, &quot;2=1; else=0&quot;)    # Transferring (mobility)
ADL05 &lt;- recode(svy$a5, &quot;2=1; else=0&quot;)    # Continence
ADL06 &lt;- recode(svy$a6, &quot;2=1; else=0&quot;)    # Feeding

################################################################################
#
#  Create ADL score (items summed over all six activities / dimensions)
#
scoreADL &lt;- ADL01 + ADL02 + ADL03 + ADL04 + ADL05 + ADL06

################################################################################
#
#  Severity of dependence (from Katz ADL score)
#
#    Indicator    Degree of severity    Related Scores
#    ---------    ------------------    ----------------
#    classADL1    Independent           scoreADL = 5,6
#    classADL2    Partial dependency    scoreADL = 3,4
#    classADL3    Severe dependency     scoreADL = 0,1,2
#    ---------    ------------------    ----------------
#
classADL1 &lt;- recode(scoreADL, &quot;5:6=1; else=0&quot;)
classADL2 &lt;- recode(scoreADL, &quot;3:4=1; else=0&quot;)
classADL3 &lt;- recode(scoreADL, &quot;0:2=1; else=0&quot;)

################################################################################
#
#  Does the subject have someone to help with everyday activities?
#
hasHelp &lt;- recode(svy$a7, &quot;1=1; else=0&quot;)

################################################################################
#
#  Does the subject need help but has no helper?
#
#  Note : Denominator is entire sample so the indicator is the proportion of
#         the population with unmet ADl help needs
#
unmetNeed &lt;- ifelse(scoreADL &lt; 6 &amp; hasHelp == 0, 1, 0)
</command>
											<property title="ADL" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="11" date="1420042383233" uid="343334ebffc484cf" x="450" y="200">
											<command></command>
											<property/>
											<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
												<entry key="io">out</entry>
											</option>
										</node>
										<node id="12" date="1419851899335" uid="dd4df9dc8a592736" x="120" y="200">
											<command>################################################################################
#
#  Household Hunger Scale (HHS)
#
#  Indicators are :
#
#    HHS1  Little or no hunger in household 
#    HHS2  Moderate hunger in household 
#    HHS3  Severe hunger in household
#
#  The HHS is described in :
#
#    Ballard T, Coates J, Swindale A, Deitchler M (2011). Household Hunger
#    Scale: Indicator Definition and Measurement Guide. Washington DC,
#    FANTA-2 Bridge, FHI 360
#

################################################################################
#
#  Recode component variables
#
svy$f3 &lt;- recode(svy$f3, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f4 &lt;- recode(svy$f4, &quot;1=1; 2=1; 3=2; else=0&quot;)
svy$f5 &lt;- recode(svy$f5, &quot;1=1; 2=1; 3=2; else=0&quot;)

################################################################################
#
#  Sum components and classify hunger into three separate indicator variables
#
sumHHS &lt;- svy$f3 + svy$f4 + svy$f5
HHS1 &lt;- recode(sumHHS, &quot;0:1=1; else=0&quot;)
HHS2 &lt;- recode(sumHHS, &quot;2:3=1; else=0&quot;)
HHS3 &lt;- recode(sumHHS, &quot;4:6=1; else=0&quot;)

###############################################################################
#
#  Clean-up
#
rm(sumHHS)
</command>
											<property title="HHS" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="13" date="1419942076025" uid="d676b9d9d958f82d" x="280" y="110">
											<command>################################################################################
#
#  Anthropometry and screening
#
#  Indicators are :
#
#    MUAC      MUAC
#    oedema    Bilateral pitting oedema (may not be nutritional)
#    screened  Either MUAC or oedema checked previously
#

################################################################################
#
#  Censor REFUSAL, NOT APPLICABLE, and MISSING values codes in MUAC and Oedema
#
MUAC &lt;- recode(svy$as1, &quot;777=NA; 888=NA; 999=NA&quot;)
oedema &lt;- recode(svy$as3, &quot;1=1; else=0&quot;)

################################################################################
#
#  Screening for GAM, MAM, SAM (i.e. either MUAC or oedema checked previously)
#
screened &lt;- ifelse(svy$as2 == 1 | svy$as4 == 1, 1, 0)
</command>
											<property title="Anthro" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="14" date="1419955749187" uid="73d5292049a6ed58" x="40" y="110">
											<command>###############################################################################
#
#  Demography and situation indicators
#
#  Indicators are :
#
#    resp1     Respondent is SUBJECT
#    resp2     Respondent is FAMILY CARER
#    resp3     Respondent is OTHER CARER
#    resp4     Respondent is OTHER
#    age       Age of respondent (years)
#    ageGrp1   Age of respondent is between 50 and 59 years
#    ageGrp2   Age of respondent is between 60 and 69 years
#    ageGrp3   Age of respondent is between 70 and 79 years
#    ageGrp4   Age of respondent is between 80 and 89 years
#    ageGrp5   Age of respondent is 90 years or older
#    sex1      Sex = MALE
#    sex2      Sex = FEMALE
#    marital1  Marital status = SINGLE
#    marital2  Marital status = MARRIED
#    marital3  Marital status = LIVING TOGETHER
#    marital4  Marital status = DIVORCED
#    marital5  Marital status = WIDOWED
#    marital6  Marital status = OTHER
#    alone     Respondent lives alone
#
resp1    &lt;- recode(svy$d1, &quot;1=1; 5:9=1; NA=1; else=0&quot;)
resp2    &lt;- recode(svy$d1, &quot;2=1; else=0&quot;)
resp3    &lt;- recode(svy$d1, &quot;3=1; else=0&quot;)
resp4    &lt;- recode(svy$d1, &quot;4=1; else=0&quot;)
age      &lt;- recode(svy$d2, &quot;888=NA; 999=NA&quot;)
ageGrp1  &lt;- recode(age,&quot;50:59=1; NA=NA; else=0&quot;)
ageGrp2  &lt;- recode(age,&quot;60:69=1; NA=NA; else=0&quot;)
ageGrp3  &lt;- recode(age,&quot;70:79=1; NA=NA; else=0&quot;)
ageGrp4  &lt;- recode(age,&quot;80:89=1; NA=NA; else=0&quot;)
ageGrp5  &lt;- recode(age,&quot;90:hi=1; NA=NA; else=0&quot;)
sex1     &lt;- recode(svy$d3, &quot;1=1; 2=0; else=NA&quot;)
sex2     &lt;- recode(svy$d3, &quot;1=0; 2=1; else=NA&quot;)
marital1 &lt;- recode(svy$d4, &quot;1=1; else=0&quot;)
marital2 &lt;- recode(svy$d4, &quot;2=1; else=0&quot;)
marital3 &lt;- recode(svy$d4, &quot;3=1; else=0&quot;)
marital4 &lt;- recode(svy$d4, &quot;4=1; else=0&quot;)
marital5 &lt;- recode(svy$d4, &quot;5=1; else=0&quot;)
marital6 &lt;- recode(svy$d4, &quot;6=1; else=0&quot;)
alone    &lt;- recode(svy$d5, &quot;1=1; else=0&quot;)
</command>
											<property title="demSit" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="15" date="1419956626543" uid="7602d11fb68155fb" x="360" y="200">
											<command>################################################################################
#
#  Make summary data.frame for ALL respondents
#
indicators.ALL &lt;- data.frame(psu, resp1, resp2, resp3, resp4,
                            age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
                            marital1, marital2, marital3, marital4, marital5, marital6, 
                            alone,
                            MF, DDS,
                            FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
                            proteinRich, pProtein, aProtein,
                            pVitA, aVitA, xVitA,
                            ironRich,
                            caRich,
                            znRich,
                            vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
                            HHS1, HHS2, HHS3,
                            ADL01, ADL02, ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
                            K6, K6Case,
                            DS,
                            H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
                            H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
                            M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
                            W1, W2, W3, W4,
                            MUAC, oedema, screened,
                            poorVA,
                            chew, food, NFRI,
                            wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
                            wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
                            wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
                            wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
                            wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
                            wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
					   wgP0, wgP1, wgP2, wgP3, wgPM)

#
# Subset summary data.frames for MALES and FEMALES
#
indicators.MALES   &lt;- subset(indicators.ALL, sex1 == 1)
indicators.FEMALES &lt;- subset(indicators.ALL, sex2 == 1)

#
# Clean-up
#
rm(psu, resp1, resp2, resp3, resp4,
   age, ageGrp1, ageGrp2, ageGrp3, ageGrp4, ageGrp5, sex1, sex2,
   marital1, marital2, marital3, marital4, marital5, marital6,
   alone,
   MF, DDS,
   FG01, FG02, FG03, FG04, FG05, FG06, FG07, FG08, FG09, FG10, FG11,
   proteinRich, pProtein, aProtein,
   pVitA, aVitA, xVitA,
   ironRich,
   caRich,
   znRich,
   vitB1, vitB2, vitB3, vitB6, vitB12, vitBcomplex,
   HHS1, HHS2, HHS3,
   ADL01, ADL02,  ADL03, ADL04, ADL05, ADL06, scoreADL, classADL1, classADL2, classADL3, hasHelp, unmetNeed,
   K6, K6Case,
   DS,
   H1, H2, H31, H32, H33, H34, H35, H36, H37, H38, H39,
   H4, H5, H61, H62, H63, H64, H65, H66, H67, H68, H69,
   M1, M2A, M2B, M2C, M2D, M2E, M2F, M2G, M2H, M2I,
   W1, W2, W3, W4,
   MUAC, oedema, screened,
   poorVA,
   chew, food, NFRI,
   wgVisionD0, wgVisionD1, wgVisionD2, wgVisionD3,
   wgHearingD0, wgHearingD1, wgHearingD2, wgHearingD3,
   wgMobilityD0, wgMobilityD1, wgMobilityD2, wgMobilityD3,
   wgRememberingD0, wgRememberingD1, wgRememberingD2, wgRememberingD3,
   wgSelfCareD0, wgSelfCareD1, wgSelfCareD2, wgSelfCareD3, 
   wgCommunicatingD0, wgCommunicatingD1, wgCommunicatingD2, wgCommunicatingD3,
   wgP0, wgP1, wgP2, wgP3, wgPM)
gc()

#
# Restore &apos;svy&apos; from back-up copy (i.e. to undo recoding used when making indicators)
#
svy &lt;- svyBackup
</command>
											<property title="makeDF" shape="INOUT"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="16" date="1420036160266" uid="1f006c4aafe957a9" x="360" y="20">
											<command>################################################################################
#
#  Miscellaneous indicators
#
#  Indicators are : 
#
#    chew  Problems chewing food
#    food  Anyone in HH receives a ration
#    NFRI  Anyone in HH received non-food relief item(s) in previous month
#
chew &lt;- recode(svy$a8, &quot;1=1; else=0&quot;)
food &lt;- recode(svy$f6, &quot;1=1; else=0&quot;)
NFRI &lt;- recode(svy$f7, &quot;1=1; else=0&quot;)


</command>
											<property title="MISC" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="17" date="1419850760867" uid="244fd8fd91e6b2d2" x="120" y="20">
											<command>################################################################################
#
#  K6 : Short form psychological distress score
#
#  Indicators are :
#
#    K6      K6 score
#    K6Case  K6 score &gt; 12  (in serious psychological distress)
#
#  The K6 score is described in :
#
#    Kessler RC, Andrews G, Colpe LJ, Hiripi E, Mroczek, DK, Normand SLT,
#    et al. (2002). Short screening scales to monitor population prevalences
#    and trends in non-specific psychological distress. Psychological
#    Medicine, 32(6), 959–976
#

################################################################################
#
#  Recode DON&apos;T KNOW, REFUSED, NA and MISSING values to 5 (NONE)
#
svy$k6a &lt;- recode(svy$k6a, &quot;6:9=5&quot;)
svy$k6b &lt;- recode(svy$k6b, &quot;6:9=5&quot;)
svy$k6c &lt;- recode(svy$k6c, &quot;6:9=5&quot;)
svy$k6d &lt;- recode(svy$k6d, &quot;6:9=5&quot;)
svy$k6e &lt;- recode(svy$k6e, &quot;6:9=5&quot;)
svy$k6f &lt;- recode(svy$k6f, &quot;6:9=5&quot;)

################################################################################
#
#  Reverse coding &amp; create K6 score (i.e. as the sum of individual item scores)
#
svy$k6a &lt;- 5 - svy$k6a
svy$k6b &lt;- 5 - svy$k6b
svy$k6c &lt;- 5 - svy$k6d
svy$k6d &lt;- 5 - svy$k6d
svy$k6e &lt;- 5 - svy$k6e
svy$k6f &lt;- 5 - svy$k6f
K6 &lt;- svy$k6a + svy$k6b + svy$k6c + svy$k6d + svy$k6e + svy$k6f

################################################################################
#
#  Apply case-definition for serious psychological distress(i.e. K6 &gt; 12)
#
K6Case &lt;- recode(K6, &quot;0:12=0; 13:hi=1&quot;)
</command>
											<property title="K6" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="18" date="1419933433899" uid="97c77fdef9e04b5c" x="200" y="200">
											<command>###############################################################################
#
#  Income and income sources
#
#  Indicators are :
#
#    M1   Has a personal income
#    M2A  Agriculture / fishing / livestock
#    M2B  Wages / salary
#    M2C  Sale of charcoal / bricks / &amp;c.
#    M2D  Trading (e.g. market or shop)
#    M2E  Investments
#    M2F  Spending savings / sale of assets
#    M2G  Charity
#    M2H  Cash transfer / Social security
#    M2I  Other
#

################################################################################
#
#  Create binary indicators
#
M1  &lt;- recode(svy$m1,  &quot;1=1; else=0&quot;) # Has a personal income
M2A &lt;- recode(svy$m2a, &quot;1=1; else=0&quot;) # Agriculture / fishing / livestock
M2B &lt;- recode(svy$m2b, &quot;1=1; else=0&quot;) # Wages / salary
M2C &lt;- recode(svy$m2c, &quot;1=1; else=0&quot;) # Sale of charcoal / bricks / &amp;c.
M2D &lt;- recode(svy$m2d, &quot;1=1; else=0&quot;) # Trading (e.g. market or shop)
M2E &lt;- recode(svy$m2e, &quot;1=1; else=0&quot;) # Investments
M2F &lt;- recode(svy$m2f, &quot;1=1; else=0&quot;) # Spending savings / sale of assets
M2G &lt;- recode(svy$m2g, &quot;1=1; else=0&quot;) # Charity
M2H &lt;- recode(svy$m2h, &quot;1=1; else=0&quot;) # Cash transfer / social security
M2I &lt;- recode(svy$m2i, &quot;1=1; else=0&quot;) # Other

################################################################################
#
#  Check for any income (return &apos;correct&apos; result in M1)
#
checkForIncome &lt;- M1 + M2A + M2B + M2C + M2D + M2E + M2F + M2G + M2H + M2I
M1 &lt;- ifelse(checkForIncome &gt; 0, 1, 0)

################################################################################
#
# Clean-up
#
rm(checkForIncome)
</command>
											<property title="Income" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="19" date="1419955458081" uid="a3a2527519909e22" x="40" y="20">
											<command>################################################################################
#
#  Identifiers and survey administration data
#
#    psu    Cluster (PSU) identifier
#
psu &lt;- svy$psu

</command>
											<property title="ID" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="20" date="1419853732167" uid="ef456daf031f865b" x="280" y="200">
											<command>################################################################################
#
#  Water, Sanitation, and Hygiene (WASH) indicators
#
#  Indicators are :
#
#      W1  Improved source of drinking water
#      W2  Safe drinking water (improved source OR adequate treatment)
#      W3  Improved sanitation facility
#      W4  Improved non-shared sanitation facility
#
#  These are a (core) subset of indicators from :
#
#     WHO / UNICEF (2006). Core Questions on Drinking-water and Sanitation
#     for Household Surveys. Geneva, WHO / UNICEF
#

################################################################################
#
#  Recode WASH data
#
svy$w1 &lt;- recode(svy$w1, &quot;1=1; else=0&quot;)
svy$w2 &lt;- recode(svy$w2, &quot;1=1; else=0&quot;)
svy$w3 &lt;- recode(svy$w3, &quot;1=1; else=0&quot;)
svy$w4 &lt;- recode(svy$w4, &quot;1=1; else=0&quot;)

################################################################################
#
#  Create WASH indicators
#
W1 &lt;- svy$w1
W2 &lt;- ifelse(svy$w1 == 1 | svy$w2 == 1, 1, 0)
W3 &lt;- svy$w3
W4 &lt;- ifelse(svy$w3 == 1 &amp; svy$w4 != 1, 1, 0)
</command>
											<property title="WASH" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="21" date="1419855951357" uid="ba43048be2d662e8" x="40" y="200">
											<command>################################################################################
#
#  Dietary intake indicators
#
#  Indicators are :
#
#    MF           Meal frequency
#    DDS          DDS (count of 11 groups)
#    FG01         Cereals
#    FG02         Roots and tubers
#    FG03         Fruits and vegetables
#    FG04         All meat
#    FG05         Eggs
#    FG06         Fish
#    FG07         Legumes, nuts, and seeds
#    FG08         Milk and milk products
#    FG09         Fats
#    FG10         Sugar
#    FG11         Other
#    aProtein	   Protein rich animal sources of protein
#    pProtein	   Protein rich plant sources of protein
#    proteinRich  Protein rich foods
#    pVitA        Plant sources of vitamin A
#    aVitA        Animal sources of vitamin A
#    xVitA        Any source of vitamin A
#    ironRich     Iron rich foods
#    caRich       Calcium rich foods
#    znRich       Zinc rich foods
#    vitB1        Vitamin B1-rich foods
#    vitB2        Vitamin B2-rich foods
#    vitB3        Vitamin B3-rich foods
#    vitB6        Vitamin B6-rich foods
#    vitB12       Vitamin B12-rich foods
#    vitBcomplex  Vitamin B1/B2/B3/B6/B12-rich foods
#
#  The basic approach used is described in:
#
#    Kennedy G, Ballard T, Dop M C (2011). Guidelines for Measuring Household
#    and Individual Dietary Diversity. Rome, FAO
#
#  and extended to include indicators of probable adequate intake of a number of
#  nutrients / micronutrients.
#

################################################################################
#
#  Meal frequency
#
MF &lt;- recode(svy$f1, &quot;9=0; NA=0&quot;)

################################################################################
#
#  Recode dietary diversity data
#
svy$f2a &lt;- recode(svy$f2a, &quot;1=1; else=0&quot;)
svy$f2b &lt;- recode(svy$f2b, &quot;1=1; else=0&quot;)
svy$f2c &lt;- recode(svy$f2c, &quot;1=1; else=0&quot;)
svy$f2d &lt;- recode(svy$f2d, &quot;1=1; else=0&quot;)
svy$f2e &lt;- recode(svy$f2e, &quot;1=1; else=0&quot;)
svy$f2f &lt;- recode(svy$f2f, &quot;1=1; else=0&quot;)
svy$f2g &lt;- recode(svy$f2g, &quot;1=1; else=0&quot;)
svy$f2h &lt;- recode(svy$f2h, &quot;1=1; else=0&quot;)
svy$f2i &lt;- recode(svy$f2i, &quot;1=1; else=0&quot;)
svy$f2j &lt;- recode(svy$f2j, &quot;1=1; else=0&quot;)
svy$f2k &lt;- recode(svy$f2k, &quot;1=1; else=0&quot;)
svy$f2l &lt;- recode(svy$f2l, &quot;1=1; else=0&quot;)
svy$f2m &lt;- recode(svy$f2m, &quot;1=1; else=0&quot;)
svy$f2n &lt;- recode(svy$f2n, &quot;1=1; else=0&quot;)
svy$f2o &lt;- recode(svy$f2o, &quot;1=1; else=0&quot;)
svy$f2p &lt;- recode(svy$f2p, &quot;1=1; else=0&quot;)
svy$f2q &lt;- recode(svy$f2q, &quot;1=1; else=0&quot;)
svy$f2r &lt;- recode(svy$f2r, &quot;1=1; else=0&quot;)
svy$f2s &lt;- recode(svy$f2s, &quot;1=1; else=0&quot;)

################################################################################
#
#  Dietary diversity
#
#    Recode to ELEVEN standard food groups :
#    
#      Var    Food group                               From ...
#      ----   ---------------------------------------  ---------------
#      FG01   Cereals                                  (f2c)
#      FG02   Roots and tubers                         (f2g)
#      FG03   Fruits and vegetables                    (f2d, f2f, f2i)
#      FG04   All meat                                 (f2j, f2k, f2q)
#      FG05   Eggs                                     (f2n)
#      FG06   Fish                                     (f2l)
#      FG07   Legumes, nuts, and seeds                 (f2h)
#      FG08   Milk and milk products                   (f2a, f2m)
#      FG09   Fats                                     (f2e, f2o)
#      FG10   Sugar                                    (f2r)
#      FG11   Other                                    (f2b, f2p, f2s)
#      ----   ---------------------------------------  ---------------
#
#    and sum into &apos;DDS&apos; ...
#
FG01 &lt;- svy$f2c
FG02 &lt;- svy$f2g
FG03 &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2i == 1, 1, 0)
FG04 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q == 1, 1, 0)
FG05 &lt;- svy$f2n
FG06 &lt;- svy$f2l
FG07 &lt;- svy$f2h
FG08 &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)
FG09 &lt;- ifelse(svy$f2e == 1 | svy$f2o == 1, 1, 0)
FG10 &lt;- svy$f2r
FG11 &lt;- ifelse(svy$f2b == 1 | svy$f2p == 1 | svy$f2s == 1, 1, 0)
#
# Sum food groups to &apos;DDS&apos;
#
DDS &lt;- FG01 + FG02 + FG03 + FG04 + FG05 + FG06 + FG07 + FG08 + FG09 + FG10 + FG11

################################################################################
#
#  Protein rich foods in diet from aminal, plant, and all sources
#
aProtein &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2q ==1 | svy$f2n == 1 | svy$f2a == 1 | svy$f2m == 1, 1, 0)
pProtein &lt;- ifelse(svy$f2h == 1 | svy$f2p == 1, 1, 0)
proteinRich &lt;- ifelse(aProtein == 1 | pProtein == 1, 1, 0)

################################################################################
#
#  Micronutrient intake (vitamin A, iron, calcium, zinc)
#
#    pVitA     Respondent consumes plant sources of vitamin A
#    aVitA     Respondent consumes animal sources of vitamin A
#    xVitA     Respondent consumes any source of vitamin A
#    ironRich  Respondent consumes iron rich foods
#    caRich    Respondent consumes calcium rich foods
#    znRich    Respondent consumes zinc rich foods
#
pVitA    &lt;- ifelse(svy$f2d == 1 | svy$f2e == 1 | svy$f2f == 1, 1, 0)
aVitA    &lt;- ifelse(svy$f2a == 1 | svy$f2j == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
xVitA    &lt;- ifelse(pVitA == 1 | aVitA == 1, 1, 0)
ironRich &lt;- ifelse(svy$f2f == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
caRich   &lt;- ifelse(svy$f2a == 1 | svy$f2m == 1, 1, 0)       
znRich   &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2p == 1 | svy$f2q == 1, 1, 0)

#################################################################################
#
#  Micronutrient intake (B vitamins)
#
#	vitB1        Respondent consumes vitamin B1-rich foods
#	vitB2        Respondent consumes vitamin B2-rich foods
#	vitB3        Respondent consumes vitamin B3-rich foods
#	vitB6        Respondent consumes vitamin B6-rich foods
#	vitB12       Respondent consumes vitamin B12-rich foods
#	vitBcomplex  Respondent consumes vitamin B1/B2/B3/B6/B12-rich foods
#
vitB1  &lt;- ifelse(svy$f2a == 1 | svy$f2e == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1 | svy$f2p == 1, 1, 0)
vitB2  &lt;- ifelse(svy$f2a == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1, 1, 0)
vitB3  &lt;- ifelse(svy$f2h == 1 | svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB6  &lt;- ifelse(svy$f2d == 1 | svy$f2f == 1 | svy$f2h == 1 | svy$f2i == 1 | svy$f2k == 1 | svy$f2l == 1, 1, 0)
vitB12 &lt;- ifelse(svy$f2j == 1 | svy$f2k == 1 | svy$f2l == 1 | svy$f2m == 1 | svy$f2n == 1, 1, 0)
vitBsources &lt;- vitB1 + vitB2 + vitB3 + vitB6 + vitB12
vitBcomplex &lt;- ifelse(vitBsources == 5, 1, 0)

################################################################################
#
# Clean-up
#
rm(vitBsources)
</command>
											<property title="Diet" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="22" date="1501749011148" uid="ccc07ccc9de4f55f" x="360" y="110">
											<command>################################################################################
#
#  Washington Group (WG) short set of question designed to identify people with a
#  disability in a census or survey format.
#
#  See:
#
#    http://www.washingtongroup-disability.com
#
#    https://www.cdc.gov/nchs/washington_group/wg_documents.htm
#
#  for details.
#

################################################################################
#
# Missing values
#
svy$wg1 &lt;- recode(svy$wg1, &quot;9=0; NA=0&quot;)
svy$wg2 &lt;- recode(svy$wg2, &quot;9=0; NA=0&quot;)
svy$wg3 &lt;- recode(svy$wg3, &quot;9=0; NA=0&quot;)
svy$wg4 &lt;- recode(svy$wg4, &quot;9=0; NA=0&quot;)
svy$wg5 &lt;- recode(svy$wg5, &quot;9=0; NA=0&quot;)
svy$wg6 &lt;- recode(svy$wg6, &quot;9=0; NA=0&quot;)

################################################################################
#
# Vision domain
#
wgVisionD0 &lt;- ifelse(svy$wg1 == 0, 1, 0)
wgVisionD1 &lt;- ifelse(svy$wg1 == 1 | svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD2 &lt;- ifelse(svy$wg1 == 2 | svy$wg1 == 3, 1, 0)
wgVisionD3 &lt;- ifelse(svy$wg1 == 3, 1, 0)

################################################################################
#
# Hearing domain
#
wgHearingD0 &lt;- ifelse(svy$wg2 == 0, 1, 0)
wgHearingD1 &lt;- ifelse(svy$wg2 == 1 | svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD2 &lt;- ifelse(svy$wg2 == 2 | svy$wg2 == 3, 1, 0)
wgHearingD3 &lt;- ifelse(svy$wg2 == 3, 1, 0)

################################################################################
#
# Mobility domain
#
wgMobilityD0 &lt;- ifelse(svy$wg3 == 0, 1, 0)
wgMobilityD1 &lt;- ifelse(svy$wg3 == 1 | svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD2 &lt;- ifelse(svy$wg3 == 2 | svy$wg3 == 3, 1, 0)
wgMobilityD3 &lt;- ifelse(svy$wg3 == 3, 1, 0)


################################################################################
#
# Remembering domain
#
wgRememberingD0 &lt;- ifelse(svy$wg4 == 0, 1, 0)
wgRememberingD1 &lt;- ifelse(svy$wg4 == 1 | svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD2 &lt;- ifelse(svy$wg4 == 2 | svy$wg4 == 3, 1, 0)
wgRememberingD3 &lt;- ifelse(svy$wg4 == 3, 1, 0)

################################################################################
#
# Self-care domain
#
wgSelfCareD0 &lt;- ifelse(svy$wg5 == 0, 1, 0)
wgSelfCareD1 &lt;- ifelse(svy$wg5 == 1 | svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD2 &lt;- ifelse(svy$wg5 == 2 | svy$wg5 == 3, 1, 0)
wgSelfCareD3 &lt;- ifelse(svy$wg5 == 3, 1, 0)

################################################################################
#
# Communicating domain
#
wgCommunicatingD0 &lt;- ifelse(svy$wg6 == 0, 1, 0)
wgCommunicatingD1 &lt;- ifelse(svy$wg6 == 1 | svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD2 &lt;- ifelse(svy$wg6 == 2 | svy$wg6 == 3, 1, 0)
wgCommunicatingD3 &lt;- ifelse(svy$wg6 == 3, 1, 0)

################################################################################
#
# Overall prevalence
#
wgP0 &lt;- ifelse(wgVisionD0 + wgHearingD0 + wgMobilityD0 + wgRememberingD0 + wgSelfCareD0 + wgCommunicatingD0 == 6, 1, 0)
wgP1 &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  0, 1, 0)
wgP2 &lt;- ifelse(wgVisionD2 + wgHearingD2 + wgMobilityD2 + wgRememberingD2 + wgSelfCareD2 + wgCommunicatingD2 &gt;  0, 1, 0)
wgP3 &lt;- ifelse(wgVisionD3 + wgHearingD3 + wgMobilityD3 + wgRememberingD3 + wgSelfCareD3 + wgCommunicatingD3 &gt;  0, 1, 0)
wgPM &lt;- ifelse(wgVisionD1 + wgHearingD1 + wgMobilityD1 + wgRememberingD1 + wgSelfCareD1 + wgCommunicatingD1 &gt;  1, 1, 0)




</command>
											<property title="disability" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="23" date="1419943196292" uid="4f85d34eee0ba35" x="200" y="110">
											<command>################################################################################
#
#  Health and health-seeking indicators
#
#  Indicators are : 
#
#    H1   Chronic condition
#
#    H2   Takes drugs regularly for chronic condition
#
#    H3x  Main reason for not taking drugs for chronic condition where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#
#    H4   Recent disease episode
#
#    H5   Accessed care for recent disease episode
#
#    H6x  Main reason for not accessing care for recent disease episode where :
#
#           x = 1    No drugs available
#           x = 2    Too expensive / no money
#           x = 3    Too old to look for care
#           x = 4    Use traditional medicine
#           x = 5    Drugs don&apos;t help
#           x = 6    No-one to help me
#           x = 7    No need
#           x = 8    Other
#           x = 9    No reason given
#

################################################################################
#
#  Health indicators : CHRONIC CONDITIONS
#
svy$h1 &lt;- recode(svy$h1, &quot;1=1; else=2&quot;)
H1 &lt;- recode(svy$h1, &quot;1=1; else=0&quot;)
H2 &lt;- ifelse(H1 == 0, NA, recode(svy$h2, &quot;1=1; else=0&quot;))
H3 &lt;- ifelse(H2 == 1, NA, recode(svy$h3, &quot;NA=9&quot;))
#
# Indicators for main reason for NOT taking drugs for chronic condition
#
H31 &lt;- recode(H3, &quot;1=1; NA=NA; else=0&quot;)
H32 &lt;- recode(H3, &quot;2=1; NA=NA; else=0&quot;)
H33 &lt;- recode(H3, &quot;3=1; NA=NA; else=0&quot;)
H34 &lt;- recode(H3, &quot;4=1; NA=NA; else=0&quot;)
H35 &lt;- recode(H3, &quot;5=1; NA=NA; else=0&quot;)
H36 &lt;- recode(H3, &quot;6=1; NA=NA; else=0&quot;)
H37 &lt;- recode(H3, &quot;7=1; NA=NA; else=0&quot;)
H38 &lt;- recode(H3, &quot;8=1; NA=NA; else=0&quot;)
H39 &lt;- recode(H3, &quot;9=1; NA=NA; else=0&quot;)

################################################################################
#
#  Health indicators : RECENT DISEASE EPISODE
#
svy$h4 &lt;- recode(svy$h4, &quot;1=1; else=2&quot;)
H4 &lt;- recode(svy$h4, &quot;1=1; else=0&quot;)
H5 &lt;- ifelse(H4 == 0, NA, recode(svy$h5, &quot;1=1; else=0&quot;))
H6 &lt;- ifelse(H5 == 1, NA, recode(svy$h6, &quot;NA=9&quot;))
#
#
# Indicators for main reason for NOT accessing care for recent disease episode
#
H61 &lt;- recode(H6, &quot;1=1; NA=NA; else=0&quot;)
H62 &lt;- recode(H6, &quot;2=1; NA=NA; else=0&quot;)
H63 &lt;- recode(H6, &quot;3=1; NA=NA; else=0&quot;)
H64 &lt;- recode(H6, &quot;4=1; NA=NA; else=0&quot;)
H65 &lt;- recode(H6, &quot;5=1; NA=NA; else=0&quot;)
H66 &lt;- recode(H6, &quot;6=1; NA=NA; else=0&quot;)
H67 &lt;- recode(H6, &quot;7=1; NA=NA; else=0&quot;)
H68 &lt;- recode(H6, &quot;8=1; NA=NA; else=0&quot;)
H69 &lt;- recode(H6, &quot;9=1; NA=NA; else=0&quot;)

#
# Clean-up
#
rm(H3, H6)
</command>
											<property title="Health" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="24" date="1419854620941" uid="e5c3eb449fd3456b" x="200" y="20">
											<command>################################################################################
#
#  Brief Community Screening Instrument for Dementia (CSID)
#
#  Indicators are :
#
#    DS  Probable dementia by CSID screen
#
#  The CSID dementia screening tool is described in :
#
#      Prince M, et al. (2010). A brief dementia screener suitable for use
#      by non-specialists in resource poor settings - The cross-cultural
#      derivation and validation of the brief Community Screening Instrument
#      for Dementia. International Journal of Geriatric Psychiatry, 26(9),
#      899–907
#

################################################################################
#
#  Recode scored components to 0 / 1 (with 1 = correct)
#
svy$ds1  &lt;- recode(svy$ds1,  &quot;1=1; else=0&quot;) # Nose
svy$ds2  &lt;- recode(svy$ds2,  &quot;1=1; else=0&quot;) # Hammer
svy$ds3  &lt;- recode(svy$ds3,  &quot;1=1; else=0&quot;) # Day of week
svy$ds4  &lt;- recode(svy$ds4,  &quot;1=1; else=0&quot;) # Season
svy$ds5  &lt;- recode(svy$ds5,  &quot;1=1; else=0&quot;) # Point to window then door
svy$ds6a &lt;- recode(svy$ds6a, &quot;1=1; else=0&quot;) # Memory &quot;CHILD&quot;
svy$ds6b &lt;- recode(svy$ds6b, &quot;1=1; else=0&quot;) # Memory &quot;HOUSE&quot;
svy$ds6c &lt;- recode(svy$ds6c, &quot;1=1; else=0&quot;) # Memory &quot;ROAD&quot;

################################################################################
#
#  Sum correct items into CSID score
#
scoreCSID &lt;- svy$ds1 + svy$ds2 + svy$ds3 + svy$ds4 + svy$ds5 + svy$ds6a + svy$ds6b + svy$ds6c

#################################################################################
#
#  Classify dementia : 
#
#    0 = Normal (not probable dementia)
#    1 = Probable dementia
#
DS &lt;- recode(scoreCSID, &quot;0:4=1; 5:8=0&quot;)

################################################################################
#
#  Clean-up
#
rm(scoreCSID)
</command>
											<property title="DS" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<node id="25" date="1420042383233" uid="d9eb712453793b5d" x="-50" y="20">
											<command></command>
											<property/>
											<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
												<entry key="io">in</entry>
											</option>
										</node>
										<node id="26" date="1419942730147" uid="18e09f1c988bb230" x="280" y="20">
											<command>################################################################################
#
#  Visual impairment by &quot;Tumbling E&quot; method
#
#  Indicators are :
#
#    poorVA  Poor visual acuity (correct in &lt; 3 of 4 tests)
#
#  Refusal and blindness are treated as test failures
#
#  The &quot;Tumbling E&quot; method is described in :
#
#    Taylor HR (1978). Applying new design principles to the construction of an
#    illiterate E Chart. Am J Optom &amp; Physiol Optics 55:348
#

################################################################################
#
#  Create binary indicators
#
svy$va2a &lt;- recode(svy$va2a, &quot;1=1; else=0&quot;)
svy$va2b &lt;- recode(svy$va2b, &quot;1=1; else=0&quot;)
svy$va2c &lt;- recode(svy$va2c, &quot;1=1; else=0&quot;)
svy$va2d &lt;- recode(svy$va2d, &quot;1=1; else=0&quot;)
sumVA &lt;- svy$va2a + svy$va2b + svy$va2c + svy$va2d
poorVA &lt;-  ifelse(sumVA &lt; 3, 1, 0)

###############################################################################
#
#  Clean-up
#
rm(sumVA)
</command>
											<property title="VA" shape="TRANSFORM"/>
											<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
										</node>
										<edge from="23" to="18"/>
										<edge from="17" to="24"/>
										<edge from="16" to="22"/>
										<edge from="25" to="19"/>
										<edge from="24" to="23"/>
										<edge from="13" to="26"/>
										<edge from="19" to="14"/>
										<edge from="18" to="20"/>
										<edge from="22" to="15"/>
										<edge from="14" to="21"/>
										<edge from="15" to="11"/>
										<edge from="20" to="13"/>
										<edge from="21" to="12"/>
										<edge from="12" to="10"/>
										<edge from="26" to="16"/>
										<edge from="10" to="17"/>
									</graph>
								</subflow>
							</option>
						</node>
						<node id="27" date="1422452617328" uid="cddf6d183d57eeab" x="360" y="10">
							<command>#
# Open file for output
#
options(width = 132)
reportFilename &lt;- paste(FILENAME, &quot;.report.csv&quot;, sep=&quot;&quot;)
sink(reportFilename, append = FALSE, type = &quot;output&quot;)

#
# Present results by indicator group
#
for(i in unique(estimates$GROUP))
  {
  #
  # Select results for current indicator group
  #
  x &lt;- subset(estimates, GROUP == i)
  #
  # Header for current indicator group
  #
  cat(&quot;,,,,,,,,,,\n&quot;)
  cat(i, &quot;,,,,,,,,,,\n&quot;, sep = &quot;&quot;)
  cat(&quot;,,ALL,,,MALES,,,FEMALES,,\n&quot;)
  cat(&quot;INDICATOR,TYPE,EST,LCL,UCL,EST,LCL,UCL,EST,LCL,UCL\n&quot;)
  #
  # Report line for each indicator in this indicator group
  #
  for(j in 1:nrow(x))
    {
    #
    # Present results for a single indicator
    #
    cat(x$LABEL[j], &quot;,&quot;, x$TYPE[j], &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.ALL[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.MALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$EST.FEMALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$LCL.FEMALES[j]), &quot;,&quot;, sep = &quot;&quot;)
    cat(sprintf(&quot;%.4f&quot;, x$UCL.FEMALES[j]))
    cat(&quot;\n&quot;)
    }
  }

#
# Close report file
#
sink()

#
# Clean-up
#
rm(reportFilename, i, j, x)
</command>
							<property title="reportCSV" shape="OUTPUT"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="28" date="1421861960636" uid="be1b684f1554aee" x="200" y="10">
							<command>#
# Parameter list (indicator names) and output column names for bootstrapping
#
params &lt;- c(&quot;MUAC&quot;)

#
# Blocking weighted bootstrap (GAM)
#
THRESHOLD &lt;- 210
bootGAM.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootGAM.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootGAM.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
names(bootGAM.ALL) &lt;- names(bootGAM.MALES) &lt;- names(bootGAM.FEMALES) &lt;- &quot;GAM&quot;

#
# Blocking weighted bootstrap (SAM)
#
THRESHOLD &lt;- 185
bootSAM.ALL &lt;- bootBW(x = indicators.ALL, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootSAM.MALES &lt;- bootBW(x = indicators.MALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
bootSAM.FEMALES &lt;- bootBW(x = indicators.FEMALES, w = psuData, statistic = bootPROBIT, params = params, outputColumns = params, replicates = REPLICATES)
names(bootSAM.ALL) &lt;- names(bootSAM.MALES) &lt;- names(bootSAM.FEMALES) &lt;- &quot;SAM&quot;

#
# MAM is GAM - SAM
#
bootMAM.ALL &lt;- bootGAM.ALL - bootSAM.ALL
bootMAM.MALES &lt;- bootGAM.MALES - bootSAM.MALES
bootMAM.FEMALES &lt;- bootGAM.FEMALES - bootSAM.FEMALES
names(bootMAM.ALL) &lt;- names(bootMAM.MALES) &lt;- names(bootMAM.FEMALES) &lt;- &quot;MAM&quot;
#
# Fix for MAM &lt; 0 (may occur if bootstrap GAM &lt; bootstrap SAM)
#
bootMAM.ALL$MAM[bootMAM.ALL$MAM &lt; 0] &lt;- 0
bootMAM.MALES$MAM[bootMAM.MALES$MAM &lt; 0] &lt;- 0
bootMAM.FEMALES$MAM[bootMAM.FEMALES$MAM &lt; 0] &lt;- 0

#
# Combine &apos;bootGAM.*&apos;, &apos;bootMAM.*&apos;, and &apos;booSAM.*&apos; data.frames (ALL, MALES, FEMALES)
#
boot.ALL &lt;- data.frame(bootGAM.ALL, bootMAM.ALL, bootSAM.ALL)
boot.MALES &lt;- data.frame(bootGAM.MALES, bootMAM.MALES, bootSAM.MALES)
boot.FEMALES &lt;- data.frame(bootGAM.FEMALES, bootMAM.FEMALES, bootSAM.FEMALES)
rm(bootGAM.ALL, bootMAM.ALL, bootSAM.ALL, bootGAM.MALES, bootMAM.MALES, bootSAM.MALES, bootGAM.FEMALES, bootMAM.FEMALES, bootSAM.FEMALES)

#
# Extract estimates from &apos;boot.*&apos; data.frames
#
estimates.ALL &lt;- data.frame(t(apply(boot.ALL, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.MALES &lt;- data.frame(t(apply(boot.MALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))
estimates.FEMALES &lt;- data.frame(t(apply(boot.FEMALES, 2, quantile, probs = c(0.025, 0.5, 0.975), na.rm = TRUE)))

# 
# Join &apos;estimates.*&apos; data.frames side-by-side
#
probitEstimates &lt;- data.frame(estimates.ALL, estimates.MALES, estimates.FEMALES)

#
# Clean-up row and column names
#
probitEstimates$indicator &lt;- row.names(probitEstimates)
row.names(probitEstimates) &lt;- NULL
names(probitEstimates) &lt;- c(&quot;LCL.ALL&quot;, &quot;EST.ALL&quot;, &quot;UCL.ALL&quot;, &quot;LCL.MALES&quot;, &quot;EST.MALES&quot;, &quot;UCL.MALES&quot;, &quot;LCL.FEMALES&quot;, &quot;EST.FEMALES&quot;, &quot;UCL.FEMALES&quot;, &quot;INDICATOR&quot;)

#
# Clean-up
#
rm(params, THRESHOLD, boot.ALL, boot.MALES, boot.FEMALES, estimates.ALL, estimates.MALES, estimates.FEMALES)
gc()
</command>
							<property title="PROBIT" shape="SUMMARY"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<edge from="5" to="28"/>
						<edge from="4" to="9"/>
						<edge from="28" to="7"/>
						<edge from="9" to="5"/>
						<edge from="8" to="6"/>
						<edge from="27" to="8"/>
						<edge from="7" to="27"/>
					</graph>
				</subflow>
			</option>
		</node>
		<node id="29" date="1443002409805" uid="7e398c7fb82fa7ea" x="430" y="110">
			<command>################################################################################
#
#  Retrieve RAM-OP survey data from .CSV file
#
FILENAME &lt;- try(file.choose(), silent = TRUE)
if(class(FILENAME) == &quot;try-error&quot;)
  {
  stop(&quot;No file was selected&quot;, call. = FALSE)
  }
if(class(FILENAME) != &quot;try-error&quot;)
  {
  svy &lt;- try(read.table(file = FILENAME, header = TRUE, sep = &quot;,&quot;), silent = TRUE)
  }
if(exists(&quot;svy&quot;) &amp;&amp; class(svy) == &quot;try-error&quot;)
  {
  stop(paste(&quot;Problem reading file &apos;&quot;, basename(FILENAME), &quot;&apos;.&quot;, sep = &quot;&quot;), call. = FALSE)
  }

#
# Make a back-up copy of &apos;svy&apos;
#
svyBackup &lt;- svy</command>
			<property title="Survey Data" shape="INOUT">
				<comment state="opened" x="50" y="-20">Read durvey data
from CSV file ...</comment>
			</property>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
		<node id="30" date="1421835615422" uid="4d56ae93eef93129" x="90" y="40">
			<command>################################################################################
#
# Stop automatic conversion of strings to factors in data.frame objects
#
options(stringsAsFactors = FALSE)

################################################################################
#
# Close any and all open output streams
#
while(sink.number() &gt; 0)
  {
  sink()
  }

################################################################################
# 
#  Clear R workspace &amp; force a garbage collection
#
rm(list = ls())
gc()

################################################################################
# 
#  Set seed for pseudo-random number generation (useful when testing)
#
set.seed(0)

################################################################################
#
#  Load required libraries / packages
#
library(foreign)     # Needed for import of EpiInfo / EpiData) .REC files
library(car)         # Needed for Box-Cox power tranformation of MUAC for PROBIT

################################################################################
#
# Global variables
#
REPLICATES &lt;- 399   # Bootstrap replicates (bigger is better but also slower).
                    # Minimum (by testing) is 399.

################################################################################
#
# Load internationalisation data from the file &apos;ramOP.language.csv&apos; which should
# be present in the current working directory (i.e. the same diectory as this
# workflow file).
#
language &lt;- try(read.table(file =  &quot;ramOP.language.csv&quot;, header = TRUE, sep = &quot;,&quot;, quote = &quot;&quot;), silent = TRUE)
if(exists(&quot;language&quot;) &amp;&amp; class(language) == &quot;try-error&quot;)
  {
  stop(paste(&quot;Problem reading the RAM-OP language file &apos;ramOP.language.csv&apos;.&quot;, sep = &quot;&quot;), call. = FALSE)
  }

###############################################################################
#
#  Recode function
#
################################################################################
#
#  Parameters :
#
#    var	    Variable to recode
#
#    recodes  Character string of recode specifications :
#
#             Recode specifications in a character string separated by
#             semicolons of the form input=output as in:
#
#               &quot;1=1;2=1;3:6=2;else=NA&quot;
#
#             If an input value satisfies more than one specification, then
#             the first (reading from left to right) is applied
#
#             If no specification is satisfied, then the input value is
#             carried over to the result unchanged
#
#             NA is allowed on both input and output
#
#             The following recode specifications are supported :
#
#               +---------------+------------------+---------------------------+
#               | Specification | Example          | Notes                     |
#               +---------------+------------------+---------------------------+
#               | Single values | 9=NA             |                           |
#               +---------------+------------------+---------------------------+
#               | Set of values | c(1,2,5)=1       | The left-hand-side is any |
#               |               | seq(1,9,2)=&apos;odd&apos; | any R function call that  |
#               |               | 1:10=1           | returns a vector          |
#               +---------------+------------------+---------------------------+
#               | Range of      | 7:9=3            | Special values lo and hi  |
#               | or values     | lo:115=1         | may be used               |
#               +---------------+------------------+---------------------------+
#               | Other values  | else=NA          |                           |
#               +---------------+------------------+---------------------------+
#
#             Character values are quoted as in :
#
#                 recodes = &quot;c(1,2,5)=&apos;sanitary&apos; else=&apos;unsanitary&apos;&quot;
#
#             The output may be the (scalar) result of a function call as in:
#
#               recodes = &quot;999=median(var, na.rm = TRUE)&quot;
#
#            Users are advised to carefully check the results of recode() calls
#            with any outputs that are the results of a function call.
#
#            The ouput may be the (scalar) value of a variable as in:
#
#              recodes = &quot;999=scalarVariable&quot;
#
#            If all of the output values are numeric, and if &apos;afr&apos;&apos; is FALSE,
#            then a numeric result is returned; if var is a factor then 
#            (by default) so is the result.
#
#    afr     Return a factor
#
#             Default is TRUE if &apos;var&apos; is a factor and is FALSE otherwise
#
#    anr     Coerce result to numeric (default is TRUE)
#
#    levels  Order of the levels in the returned factor; the default is to use
#            the sort order of the level names.
#
################################################################################
#
#  Returns :
#
#    Recoded variable
#
################################################################################

recode &lt;- function(var, recodes, afr, anr = TRUE, levels) 
  {
  squeezeBlanks &lt;- function(text)
    {
    gsub(&quot; *&quot;, &quot;&quot;,  text)
    }
  recodes &lt;- gsub(&quot;\n|\t&quot;, &quot; &quot;, recodes)
  recode.list &lt;- rev(strsplit(recodes, &quot;;&quot;)[[1]])
  is.fac &lt;- is.factor(var)
  if (missing(afr)) afr &lt;- is.fac
  if (is.fac) var &lt;- as.character(var)
  result &lt;- var
  if (is.numeric(var))
    {
    lo &lt;- min(var, na.rm = TRUE)
    hi &lt;- max(var, na.rm = TRUE)
    }
  for (term in recode.list)
    {
    if (0 &lt; length(grep(&quot;:&quot;, term)))
      {
      range &lt;- strsplit(strsplit(term, &quot;=&quot;)[[1]][1], &quot;:&quot;)
      low &lt;- eval(parse(text = range[[1]][1]))
      high &lt;- eval(parse(text = range[[1]][2]))
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      result[(var &gt;= low) &amp; (var &lt;= high)] &lt;- target
      }
    else if (0 &lt; length(grep(&quot;^else=&quot;, squeezeBlanks(term))))
      {
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      result[1:length(var)] &lt;- target
      }
    else
      {
      set &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][1]))
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      for (val in set)
        {
        if (is.na(val)) result[is.na(var)] &lt;- target else result[var == val] &lt;- target
        }
      }
    }
  if (afr)
    {
    result &lt;- if (!missing(levels)) factor(result, levels = levels) else as.factor(result)
    }
    else if (anr &amp;&amp; (!is.numeric(result)))
      {
      result.valid &lt;- na.omit(result)
      opt &lt;- options(warn = -1)
      result.valid &lt;- as.numeric(result.valid)
      options(opt)
      if (!any(is.na(result.valid))) result &lt;- as.numeric(result)
      }
  return(result)
  }

################################################################################
#
#  Blocking Weighted Bootstrap
#
################################################################################
#
#  Parameters :
#
#    x                A data.frame with PSU in column named &apos;psu&apos;
#
#    w                A data.frame with PSU in column named &apos;psu&apos; and survey
#                     weight (i.e. PSU population) in column named &apos;pop&apos;
#
#    statistic        A function operating on data in &apos;x&apos; (see Example)
#
#    params           Parameters (named columns in &apos;x&apos;) passed to the
#                     function specified in &apos;statistic&apos;
#
#    outputColumns    Names of columns in output data.frame
#
#    replicates       Number of bootstrap replicates (default = 400)
#
################################################################################
#
#  Returns :
#
#    A data.frame with :
#
#      ncol  = length(outputColumns)
#      nrow  = replicates
#      names = outputColumns
#
################################################################################
#
#  Example :
#
#    Example function (estimate a proportion for a binary (0/1) variable) :
#
#      oneP &lt;- function(x, params)
#        {
#        v1 &lt;- params[1]
#        v1Data &lt;- x[[v1]]
#        oneP &lt;- mean(v1Data, na.rm = TRUE)
#        return(oneP)
#        }
#
#  Example call to bootBW function:
#
#    bootP &lt;- bootBW(x = data,
#                    w = pops,
#                    statistic = oneP,
#                    params = &quot;nameOfVariable&quot;,
#                    outputColumns = &quot;p&quot;,
#                    replicates = 400)
#
#  Example estimate with 95% CI :
#
#    quantile(bootP, probs = c(0.500, 0.025, 0.975), na.rm = TRUE)
#
################################################################################
#
#  Version : 16/05/2014
#
################################################################################

bootBW &lt;- function(x, w, statistic, params, outputColumns, replicates = 400)
  {
  #
  # Scale and accumulate weights
  #
  w$weight &lt;- w$pop / sum(w$pop)
  w$cumWeight &lt;- cumsum(w$weight)
  #
  # Create data.frame with named columns for output
  #
  boot &lt;- data.frame(matrix(ncol = length(outputColumns), nrow = replicates))
  names(boot) &lt;- outputColumns
  #
  # Create an empty data.frame with same structure of &apos;x&apos; with sufficient rows
  # to hold the largest possible survey replicate (i.e. the number of clusters
  # in &apos;x&apos; multiplied by the size of the largest cluster in &apos;x&apos;)
  #
  nClusters &lt;- nrow(w)
  maxRows &lt;- nClusters * max(table(x$psu))
  emptyDF &lt;- rbind(as.data.frame(lapply(x, function(x) rep.int(NA, maxRows))))
  #
  # Vector to hold clusters to be included in a survey replicate
  #
  sampledClusters &lt;- vector(mode = mode(x$psu), length = nClusters)
  #
  # And now ... resample!
  #
  for(i in 1:replicates)
    {
    #
    # Create a dataframe to hold a survey replicate
    #
    xBW &lt;- emptyDF
    #
    # Blocking Bootstrap from &apos;x&apos; (blocking on x$psu = cluster identifier)
    #
    for(j in 1:nClusters)
      {
      #
      # &quot;Roulette Wheel&quot; algorithm (to select a weighted sample of clusters)
      #
      sampledClusters[j] &lt;- w$psu[which.max(w$cumWeight &gt;= runif(n = 1, min = 0, max = 1))]
      }
    #
    # Pointer for inserting selected clusters into the survey replicate
    #
    rowIndex &lt;- 1
    #
    # Build a (blocking weighted) bootstrap replicate from the selected clusters
    #
    for(k in 1:nClusters)
      {
      #
      # Extract data for cluster and resample within the cluster
      #
      y &lt;- subset(x, psu == sampledClusters[k])
      clusterN &lt;- nrow(y)
      y &lt;- y[sample(1:clusterN, replace = TRUE), ]
      #
      # Insert cluster replicate into survey replicate
      #
      endRow &lt;- rowIndex + clusterN
      xBW[rowIndex:(endRow - 1), ] &lt;- y
      #
      # Update pointer
      #
      rowIndex &lt;- endRow
      }
    #
    # Select data for analysis
    #
    xBW &lt;- xBW[1:(rowIndex - 1), ]
    #
    # Apply statistic
    #
    boot[i, ] &lt;- statistic(xBW, params)
    }
  return(boot)
  }

################################################################################
#
# Statistics function (simple proportion) for bootstrap estimation
#
bootClassic &lt;- function(x, params)
  {
  result &lt;- vector(mode = &quot;numeric&quot;, length = length(params))
  for(i in 1:length(params))
    {
    result[i]  &lt;- mean(x[[params[i]]], na.rm = TRUE)
    }
  return(result)
  }

################################################################################
#
# Statistics function (PROBIT) for bootstrap estimation
#
bootPROBIT &lt;- function(x, params, threshold = THRESHOLD)
  {
  #
  # Get data
  #
  d &lt;- x[[params[1]]]
  #
  # Shift data to the left to avoid &quot;comutation instability&quot; when :
  #
  #   max(x) / min(x)
  #
  # is small (i.e. close to unity).
  #	
  shift &lt;- min(min(d, na.rm = TRUE), threshold) - 1
  d &lt;- d - shift
  threshold &lt;- threshold - shift
  #
  # Box-cox transformation
  #
  lambda &lt;- powerTransform(d)$lambda
  d &lt;- bcPower(d, lambda)
  threshold &lt;- bcPower(threshold, lambda)  
  m &lt;- mean(d, na.rm = TRUE)
  s &lt;- sd(d, na.rm = T)
  #
  # PROBIT estimate
  #
  x &lt;- pnorm(q = threshold, mean = m, sd = s)
  return(x)
  }

################################################################################
#
#  Fill out a one-dimensional table to include a specified range of values
#
################################################################################
#
#   Parameters :
#
#     x       A vector to tabulate
#     values  A vector of value to be included in a table
#
################################################################################

fullTable &lt;- function(x, values)
  {
  tab &lt;- NULL
  for(i in values)
    {
    tab &lt;-c(tab, table(x)[as.character(i)])
    }
  tab[is.na(tab)] &lt;- 0  
  names(tab) &lt;- as.character(values)
  return(tab)
  }

###############################################################################
#
#  Pyramid plot 
#
################################################################################
#
#  Parameters :
#
#    x     A vector (numeric, factor, character) holding age-groups
#
#    g     A binary categorical variable (usually sex)
#
#    main  Plot title
# 
#    xlab  x-axis label
#
#    ylab  y-axis label
#
################################################################################
#
#  Returns :
#
#    Axis tick positions (of limited use)
#
################################################################################

pyramid.plot &lt;- function(x, g, main = paste(&quot;Pyramid plot of&quot;, deparse(substitute(x)), &quot;by&quot;, deparse(substitute(g))), xlab = paste(deparse(substitute(g)), &quot;(&quot;, levels(g)[1], &quot;/&quot;, levels(g)[2],&quot;)&quot;), ylab = deparse(substitute(x)))
  {
  tab &lt;- table(x, g); tab[ ,1] &lt;- -tab[ ,1]
  barplot(tab, horiz = TRUE, beside = TRUE, space = c(0, -nrow(tab)), names.arg = c(dimnames(tab)$x, dimnames(tab)$x), xlim = c(min(tab) * 1.2, max(tab) * 1.2), col = &quot;white&quot;, main = main, xlab = xlab, ylab = ylab, axes = FALSE)
  axis(side = 1, labels = abs(axTicks(side = 1)), at = (axTicks(side = 1)))
  }
</command>
			<property title="Initialise" shape="MODEL">
				<comment state="opened" x="50" y="-20">Reset workflow for a
new analysis.</comment>
			</property>
			<option type="com.ef_prime.rflow.node.base.SubflowNodeModel">
				<subflow>
					<graph version="0.8" width="1619" height="529" locationtype="a" offsetx="100" offsety="40">
						<node id="31" date="1421835615421" uid="eac6d651f58c3915" x="430" y="0">
							<command></command>
							<property/>
							<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
								<entry key="io">out</entry>
							</option>
						</node>
						<node id="32" date="1421835518817" uid="364807c7db18c15a" x="160" y="0">
							<command>################################################################################
#
#  Blocking Weighted Bootstrap
#
################################################################################
#
#  Parameters :
#
#    x                A data.frame with PSU in column named &apos;psu&apos;
#
#    w                A data.frame with PSU in column named &apos;psu&apos; and survey
#                     weight (i.e. PSU population) in column named &apos;pop&apos;
#
#    statistic        A function operating on data in &apos;x&apos; (see Example)
#
#    params           Parameters (named columns in &apos;x&apos;) passed to the
#                     function specified in &apos;statistic&apos;
#
#    outputColumns    Names of columns in output data.frame
#
#    replicates       Number of bootstrap replicates (default = 400)
#
################################################################################
#
#  Returns :
#
#    A data.frame with :
#
#      ncol  = length(outputColumns)
#      nrow  = replicates
#      names = outputColumns
#
################################################################################
#
#  Example :
#
#    Example function (estimate a proportion for a binary (0/1) variable) :
#
#      oneP &lt;- function(x, params)
#        {
#        v1 &lt;- params[1]
#        v1Data &lt;- x[[v1]]
#        oneP &lt;- mean(v1Data, na.rm = TRUE)
#        return(oneP)
#        }
#
#  Example call to bootBW function:
#
#    bootP &lt;- bootBW(x = data,
#                    w = pops,
#                    statistic = oneP,
#                    params = &quot;nameOfVariable&quot;,
#                    outputColumns = &quot;p&quot;,
#                    replicates = 400)
#
#  Example estimate with 95% CI :
#
#    quantile(bootP, probs = c(0.500, 0.025, 0.975), na.rm = TRUE)
#
################################################################################
#
#  Version : 16/05/2014
#
################################################################################

bootBW &lt;- function(x, w, statistic, params, outputColumns, replicates = 400)
  {
  #
  # Scale and accumulate weights
  #
  w$weight &lt;- w$pop / sum(w$pop)
  w$cumWeight &lt;- cumsum(w$weight)
  #
  # Create data.frame with named columns for output
  #
  boot &lt;- data.frame(matrix(ncol = length(outputColumns), nrow = replicates))
  names(boot) &lt;- outputColumns
  #
  # Create an empty data.frame with same structure of &apos;x&apos; with sufficient rows
  # to hold the largest possible survey replicate (i.e. the number of clusters
  # in &apos;x&apos; multiplied by the size of the largest cluster in &apos;x&apos;)
  #
  nClusters &lt;- nrow(w)
  maxRows &lt;- nClusters * max(table(x$psu))
  emptyDF &lt;- rbind(as.data.frame(lapply(x, function(x) rep.int(NA, maxRows))))
  #
  # Vector to hold clusters to be included in a survey replicate
  #
  sampledClusters &lt;- vector(mode = mode(x$psu), length = nClusters)
  #
  # And now ... resample!
  #
  for(i in 1:replicates)
    {
    #
    # Create a dataframe to hold a survey replicate
    #
    xBW &lt;- emptyDF
    #
    # Blocking Bootstrap from &apos;x&apos; (blocking on x$psu = cluster identifier)
    #
    for(j in 1:nClusters)
      {
      #
      # &quot;Roulette Wheel&quot; algorithm (to select a weighted sample of clusters)
      #
      sampledClusters[j] &lt;- w$psu[which.max(w$cumWeight &gt;= runif(n = 1, min = 0, max = 1))]
      }
    #
    # Pointer for inserting selected clusters into the survey replicate
    #
    rowIndex &lt;- 1
    #
    # Build a (blocking weighted) bootstrap replicate from the selected clusters
    #
    for(k in 1:nClusters)
      {
      #
      # Extract data for cluster and resample within the cluster
      #
      y &lt;- subset(x, psu == sampledClusters[k])
      clusterN &lt;- nrow(y)
      y &lt;- y[sample(1:clusterN, replace = TRUE), ]
      #
      # Insert cluster replicate into survey replicate
      #
      endRow &lt;- rowIndex + clusterN
      xBW[rowIndex:(endRow - 1), ] &lt;- y
      #
      # Update pointer
      #
      rowIndex &lt;- endRow
      }
    #
    # Select data for analysis
    #
    xBW &lt;- xBW[1:(rowIndex - 1), ]
    #
    # Apply statistic
    #
    boot[i, ] &lt;- statistic(xBW, params)
    }
  return(boot)
  }

################################################################################
#
# Statistics function (simple proportion) for bootstrap estimation
#
bootClassic &lt;- function(x, params)
  {
  result &lt;- vector(mode = &quot;numeric&quot;, length = length(params))
  for(i in 1:length(params))
    {
    result[i]  &lt;- mean(x[[params[i]]], na.rm = TRUE)
    }
  return(result)
  }

################################################################################
#
# Statistics function (PROBIT) for bootstrap estimation
#
bootPROBIT &lt;- function(x, params, threshold = THRESHOLD)
  {
  #
  # Get data
  #
  d &lt;- x[[params[1]]]
  #
  # Shift data to the left to avoid &quot;comutation instability&quot; when :
  #
  #   max(x) / min(x)
  #
  # is small (i.e. close to unity).
  #	
  shift &lt;- min(min(d, na.rm = TRUE), threshold) - 1
  d &lt;- d - shift
  threshold &lt;- threshold - shift
  #
  # Box-cox transformation
  #
  lambda &lt;- powerTransform(d)$lambda
  d &lt;- bcPower(d, lambda)
  threshold &lt;- bcPower(threshold, lambda)  
  m &lt;- mean(d, na.rm = TRUE)
  s &lt;- sd(d, na.rm = T)
  #
  # PROBIT estimate
  #
  x &lt;- pnorm(q = threshold, mean = m, sd = s)
  return(x)
  }</command>
							<property title="bootBW"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="33" date="1421835615420" uid="e1bc73808b6a0704" x="-80" y="0">
							<command></command>
							<property/>
							<option type="com.ef_prime.rflow.node.base.TunnelNodeModel">
								<entry key="io">in</entry>
							</option>
						</node>
						<node id="34" date="1422612438785" uid="f4f82dc1e06468a6" x="340" y="0">
							<command>###############################################################################
#
#  Pyramid plot 
#
################################################################################
#
#  Parameters :
#
#    x     A vector (numeric, factor, character) holding age-groups
#
#    g     A binary categorical variable (usually sex)
#
#    main  Plot title
# 
#    xlab  x-axis label
#
#    ylab  y-axis label
#
################################################################################
#
#  Returns :
#
#    Axis tick positions (of limited use)
#
################################################################################

pyramid.plot &lt;- function(x, g, main = paste(&quot;Pyramid plot of&quot;, deparse(substitute(x)), &quot;by&quot;, deparse(substitute(g))), xlab = paste(deparse(substitute(g)), &quot;(&quot;, levels(g)[1], &quot;/&quot;, levels(g)[2],&quot;)&quot;), ylab = deparse(substitute(x)))
  {
  tab &lt;- table(x, g); tab[ ,1] &lt;- -tab[ ,1]
  barplot(tab, horiz = TRUE, beside = TRUE, space = c(0, -nrow(tab)), names.arg = c(dimnames(tab)$x, dimnames(tab)$x), xlim = c(min(tab) * 1.2, max(tab) * 1.2), col = &quot;white&quot;, main = main, xlab = xlab, ylab = ylab, axes = FALSE)
  axis(side = 1, labels = abs(axTicks(side = 1)), at = (axTicks(side = 1)))
  }
</command>
							<property title="pyramidPlot"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="35" date="1422612280104" uid="7049e239caeaabf1" x="250" y="0">
							<command>################################################################################
#
#  Fill out a one-dimensional table to include a specified range of values
#
################################################################################
#
#   Parameters :
#
#     x       A vector to tabulate
#     values  A vector of value to be included in a table
#
################################################################################

fullTable &lt;- function(x, values)
  {
  tab &lt;- NULL
  for(i in values)
    {
    tab &lt;-c(tab, table(x)[as.character(i)])
    }
  tab[is.na(tab)] &lt;- 0  
  names(tab) &lt;- as.character(values)
  return(tab)
  }
</command>
							<property title="fullTable"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="36" date="1421942048766" uid="fcef21e2b2c8abb0" x="0" y="0">
							<command>################################################################################
#
# Stop automatic conversion of strings to factors in data.frame objects
#
options(stringsAsFactors = FALSE)

################################################################################
#
# Close any and all open output streams
#
while(sink.number() &gt; 0)
  {
  sink()
  }

################################################################################
# 
#  Clear R workspace &amp; force a garbage collection
#
rm(list = ls())
gc()

################################################################################
# 
#  Set seed for pseudo-random number generation (useful when testing)
#
set.seed(0)

################################################################################
#
#  Load required libraries / packages
#
library(foreign)     # Needed for import of EpiInfo / EpiData) .REC files
library(car)         # Needed for Box-Cox power tranformation of MUAC for PROBIT

################################################################################
#
# Global variables
#
REPLICATES &lt;- 399   # Bootstrap replicates (bigger is better but also slower).
                    # Minimum (by testing) is 399.

################################################################################
#
# Load internationalisation data from the file &apos;ramOP.language.csv&apos; which should
# be present in the current working directory (i.e. the same diectory as this
# workflow file).
#
language &lt;- try(read.table(file =  &quot;ramOP.language.csv&quot;, header = TRUE, sep = &quot;,&quot;, quote = &quot;&quot;), silent = TRUE)
if(exists(&quot;language&quot;) &amp;&amp; class(language) == &quot;try-error&quot;)
  {
  stop(paste(&quot;Problem reading the RAM-OP language file &apos;ramOP.language.csv&apos;.&quot;, sep = &quot;&quot;), call. = FALSE)
  }
</command>
							<property title="Reset"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<node id="37" date="1419850902088" uid="895d3e86d373df3e" x="80" y="0">
							<command>###############################################################################
#
#  Recode function
#
################################################################################
#
#  Parameters :
#
#    var	    Variable to recode
#
#    recodes  Character string of recode specifications :
#
#             Recode specifications in a character string separated by
#             semicolons of the form input=output as in:
#
#               &quot;1=1;2=1;3:6=2;else=NA&quot;
#
#             If an input value satisfies more than one specification, then
#             the first (reading from left to right) is applied
#
#             If no specification is satisfied, then the input value is
#             carried over to the result unchanged
#
#             NA is allowed on both input and output
#
#             The following recode specifications are supported :
#
#               +---------------+------------------+---------------------------+
#               | Specification | Example          | Notes                     |
#               +---------------+------------------+---------------------------+
#               | Single values | 9=NA             |                           |
#               +---------------+------------------+---------------------------+
#               | Set of values | c(1,2,5)=1       | The left-hand-side is any |
#               |               | seq(1,9,2)=&apos;odd&apos; | any R function call that  |
#               |               | 1:10=1           | returns a vector          |
#               +---------------+------------------+---------------------------+
#               | Range of      | 7:9=3            | Special values lo and hi  |
#               | or values     | lo:115=1         | may be used               |
#               +---------------+------------------+---------------------------+
#               | Other values  | else=NA          |                           |
#               +---------------+------------------+---------------------------+
#
#             Character values are quoted as in :
#
#                 recodes = &quot;c(1,2,5)=&apos;sanitary&apos; else=&apos;unsanitary&apos;&quot;
#
#             The output may be the (scalar) result of a function call as in:
#
#               recodes = &quot;999=median(var, na.rm = TRUE)&quot;
#
#            Users are advised to carefully check the results of recode() calls
#            with any outputs that are the results of a function call.
#
#            The ouput may be the (scalar) value of a variable as in:
#
#              recodes = &quot;999=scalarVariable&quot;
#
#            If all of the output values are numeric, and if &apos;afr&apos;&apos; is FALSE,
#            then a numeric result is returned; if var is a factor then 
#            (by default) so is the result.
#
#    afr     Return a factor
#
#             Default is TRUE if &apos;var&apos; is a factor and is FALSE otherwise
#
#    anr     Coerce result to numeric (default is TRUE)
#
#    levels  Order of the levels in the returned factor; the default is to use
#            the sort order of the level names.
#
################################################################################
#
#  Returns :
#
#    Recoded variable
#
################################################################################

recode &lt;- function(var, recodes, afr, anr = TRUE, levels) 
  {
  squeezeBlanks &lt;- function(text)
    {
    gsub(&quot; *&quot;, &quot;&quot;,  text)
    }
  recodes &lt;- gsub(&quot;\n|\t&quot;, &quot; &quot;, recodes)
  recode.list &lt;- rev(strsplit(recodes, &quot;;&quot;)[[1]])
  is.fac &lt;- is.factor(var)
  if (missing(afr)) afr &lt;- is.fac
  if (is.fac) var &lt;- as.character(var)
  result &lt;- var
  if (is.numeric(var))
    {
    lo &lt;- min(var, na.rm = TRUE)
    hi &lt;- max(var, na.rm = TRUE)
    }
  for (term in recode.list)
    {
    if (0 &lt; length(grep(&quot;:&quot;, term)))
      {
      range &lt;- strsplit(strsplit(term, &quot;=&quot;)[[1]][1], &quot;:&quot;)
      low &lt;- eval(parse(text = range[[1]][1]))
      high &lt;- eval(parse(text = range[[1]][2]))
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      result[(var &gt;= low) &amp; (var &lt;= high)] &lt;- target
      }
    else if (0 &lt; length(grep(&quot;^else=&quot;, squeezeBlanks(term))))
      {
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      result[1:length(var)] &lt;- target
      }
    else
      {
      set &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][1]))
      target &lt;- eval(parse(text = strsplit(term, &quot;=&quot;)[[1]][2]))
      for (val in set)
        {
        if (is.na(val)) result[is.na(var)] &lt;- target else result[var == val] &lt;- target
        }
      }
    }
  if (afr)
    {
    result &lt;- if (!missing(levels)) factor(result, levels = levels) else as.factor(result)
    }
    else if (anr &amp;&amp; (!is.numeric(result)))
      {
      result.valid &lt;- na.omit(result)
      opt &lt;- options(warn = -1)
      result.valid &lt;- as.numeric(result.valid)
      options(opt)
      if (!any(is.na(result.valid))) result &lt;- as.numeric(result)
      }
  return(result)
  }
</command>
							<property title="recode"/>
							<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
						</node>
						<edge from="34" to="31"/>
						<edge from="35" to="34"/>
						<edge from="33" to="36"/>
						<edge from="32" to="35"/>
						<edge from="36" to="37"/>
						<edge from="37" to="32"/>
					</graph>
				</subflow>
			</option>
		</node>
		<node id="38" date="1419850244041" uid="23bfca7ed0b9b28a" x="90" y="110">
			<command>################################################################################
#
#  Retrieve RAM-OP survey data from EpiData / EpiInfo .REC file
#
#  NOTE : Warning meesages such as :
#
#           1: In lapply(X = X, FUN = FUN, ...) : NAs introduced by coercion
#
#         are due to missing values in the .REC file and may be safely ignored
#
FILENAME &lt;- try(file.choose(), silent = TRUE)
if(class(FILENAME) == &quot;try-error&quot;)
  {
  stop(&quot;No file was selected&quot;, call. = FALSE)
  }
if(class(FILENAME) != &quot;try-error&quot;)
  {
  svy &lt;- try(read.epiinfo(file = FILENAME), silent = TRUE)
  }
if(exists(&quot;svy&quot;) &amp;&amp; class(svy) == &quot;try-error&quot;)
  {
  stop(paste(&quot;Problem reading file &apos;&quot;, basename(FILENAME), &quot;&apos;.&quot;, sep = &quot;&quot;), call. = FALSE)
  }

#
# Make a back-up copy of &apos;svy&apos;
#
svyBackup &lt;- svy
</command>
			<property title="Survey Data" shape="INOUT">
				<comment state="opened" x="50" y="-20">Read survey data from
EpiData .REC file ...</comment>
			</property>
			<option type="com.ef_prime.rflow.node.base.FreeNodeModel"/>
		</node>
	</graph>
	<task>
		<taskgroup>
			<taskproperty/>
		</taskgroup>
	</task>
</rflow>
